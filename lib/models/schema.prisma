generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  engineType      = "library"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                        BigInt                    @id @default(autoincrement())
  auth_id                   String                    @unique
  created_at                DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                 @default(now()) @updatedAt @db.Timestamptz(6)
  username                  String                    @db.VarChar
  name                      String
  image                     String?
  bio                       String?
  onboarded                 Boolean                   @default(false)
  archivedPosts             ArchivedPost[]
  archivedRealtimePosts     ArchivedRealtimePost[]
  conversationsUser1        Conversation[]            @relation("ConversationUser1")
  conversationsUser2        Conversation[]            @relation("ConversationUser2")
  conversation_participants ConversationParticipant[]
  favoriteItems             FavoriteItem[]
  following                 Follow[]                  @relation("FollowingRelation")
  followers                 Follow[]                  @relation("FollowerRelation")
  friendSuggestionsTarget   FriendSuggestion[]        @relation("SuggestionsTarget")
  friendSuggestionsCreated  FriendSuggestion[]        @relation("SuggestionsCreator")
  integrations              Integration[]
  likes                     Like[]
  linkedAccounts            LinkedAccount[]
  messages                  Message[]
  sentNotifications         Notification[]            @relation("NotificationActor")
  receivedNotifications     Notification[]            @relation("NotificationUser")
  productReviewVotes        ProductReviewVote[]
  productReviewVouches      ProductReviewVouch[]
  productReviews            ProductReview[]
  realtimeedges             RealtimeEdge[]
  realtimeLikes             RealtimeLike[]
  realtimeposts             RealtimePost[]
  feedPosts                 FeedPost[]
  realtimeRoomInviteTokens  RealtimeRoomInviteToken[]
  recommendationClicks      RecommendationClick[]
  attributeEdits            UserAttributeEdit[]
  userAttributes            UserAttributes?
  userEmbedding             UserEmbedding?
  createdPredictionMarkets  PredictionMarket[]        @relation("CreatedPredictionMarkets")
  oraclePredictionMarkets   PredictionMarket[]        @relation("OraclePredictionMarkets")
  trades                    Trade[]                   @relation("UserTrades")
  wallet                    Wallet?
  resolutionLogs            ResolutionLog[]
  realtimerooms             UserRealtimeRoom[]
  workflows                 Workflow[]
  stalls                    Stall[]
  offers                    Offer[]
  bids                      Bid[]
  orders                    Order[]
  StallMessage              StallMessage[]
  cartItems                 CartItem[]
  carts                     Cart[]
  settings                  UserSettings?
  Auction                   Auction[]

  @@map("users")
}

model UserAttributes {
  id                  BigInt     @id @default(autoincrement())
  user_id             BigInt     @unique
  created_at          DateTime   @default(now()) @db.Timestamptz(6)
  artists             String[]
  albums              String[]
  songs               String[]
  interests           String[]
  movies              String[]
  birthday            DateTime?
  communities         String[]
  hobbies             String[]
  location            String?
  books               String[]
  events_visibility   visibility @default(PUBLIC)
  tv_visibility       visibility @default(PUBLIC)
  podcasts_visibility visibility @default(PUBLIC)
  updated_at          DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  user                User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_attributes")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Like {
  id           BigInt    @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  score        Int
  type         like_type @default(LIKE)
  user_id      BigInt
  updated_at   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  feed_post_id BigInt
  feedPost     FeedPost  @relation(fields: [feed_post_id], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([feed_post_id, user_id])
  @@map("likes")
}

model FeedPost {
  id BigInt @id @default(autoincrement())

  created_at DateTime       @default(now()) @db.Timestamptz(6)
  updated_at DateTime?      @default(now()) @updatedAt @db.Timestamptz(6)
  author_id  BigInt
  type       feed_post_type
  content    String?
  image_url  String?
  portfolio  Json? // <-- add this

  video_url        String?
  caption          String?
  isPublic         Boolean           @default(true)
  like_count       Int               @default(0)
  expiration_date  DateTime?
  author           User              @relation(fields: [author_id], references: [id])
  predictionMarket PredictionMarket? @relation("FeedPostPrediction")
  productReview    ProductReview?
  articleId        String?           @unique
  thumbnailKey     String? // 4:3 hero variant stored in CDN
  tldr             String? // 280-char summary
  parent_id        BigInt?
  pluginData       Json?
  pluginType       String?
  feedPost         FeedPost?         @relation("FeedPostChildren", fields: [parent_id], references: [id], onDelete: Restrict)
  children         FeedPost[]        @relation("FeedPostChildren")
  Like             Like[]

  @@index([author_id])
  @@map("feed_posts")
}

enum feed_post_type {
  TEXT
  VIDEO
  IMAGE
  LIVESTREAM
  IMAGE_COMPUTE
  COLLAGE
  GALLERY
  PORTAL
  AUDIO
  DRAW
  LIVECHAT
  DOCUMENT
  THREAD
  CODE
  PORTFOLIO
  LLM_INSTRUCTION
  PREDICTION
  PLUGIN
  PRODUCT_REVIEW
  ENTROPY
  MUSIC
  ROOM_CANVAS
  ARTICLE
}

model RealtimeLike {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  score            Int
  type             like_type    @default(LIKE)
  user_id          BigInt
  realtime_post_id BigInt
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  realtime_post    RealtimePost @relation(fields: [realtime_post_id], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([realtime_post_id, user_id])
  @@map("realtime_likes")
}

model RealtimeRoom {
  id                       String                    @id
  created_at               DateTime                  @default(now()) @db.Timestamptz(6)
  room_icon                String
  isLounge                 Boolean                   @default(false)
  isPublic                 Boolean                   @default(false)
  realtimeedges            RealtimeEdge[]
  realtimeposts            RealtimePost[]
  realtimeRoomInviteTokens RealtimeRoomInviteToken[]
  members                  UserRealtimeRoom[]

  @@map("realtime_rooms")
}

model RealtimePost {
  id                 BigInt             @id @default(autoincrement())
  created_at         DateTime           @default(now()) @db.Timestamptz(6)
  content            String?
  image_url          String?
  video_url          String?
  caption            String?
  author_id          BigInt
  updated_at         DateTime?          @default(now()) @updatedAt @db.Timestamptz(6)
  like_count         Int                @default(0)
  x_coordinate       Decimal
  y_coordinate       Decimal
  type               realtime_post_type @default(TEXT)
  realtime_room_id   String
  locked             Boolean
  collageLayoutStyle String?
  collageColumns     Int?
  collageGap         Int?
  isPublic           Boolean            @default(false)
  parent_id          BigInt?
  expiration_date    DateTime?
  pluginData         Json?
  pluginType         String?
  room_post_content  Json?
  productReview      ProductReview?
  predictionMarket   PredictionMarket?  @relation(fields: [predictionMarketId], references: [id])
  outgoing_edges     RealtimeEdge[]     @relation("RealtimeEdgeToSourceRealtimePost")
  incoming_edges     RealtimeEdge[]     @relation("RealtimeEdgeToTargetRealtimePost")
  likes              RealtimeLike[]
  author             User               @relation(fields: [author_id], references: [id])
  realtimePost       RealtimePost?      @relation("RealtimePostChildren", fields: [parent_id], references: [id], onDelete: Restrict)
  children           RealtimePost[]     @relation("RealtimePostChildren")
  realtimeroom       RealtimeRoom       @relation(fields: [realtime_room_id], references: [id])
  predictionMarketId String?

  @@map("realtime_posts")
}

model RealtimeEdge {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  source_node_id   BigInt
  target_node_id   BigInt
  author_id        BigInt
  realtime_room_id String
  author           User         @relation(fields: [author_id], references: [id])
  realtimeroom     RealtimeRoom @relation(fields: [realtime_room_id], references: [id])
  sourceNode       RealtimePost @relation("RealtimeEdgeToSourceRealtimePost", fields: [source_node_id], references: [id])
  targetNode       RealtimePost @relation("RealtimeEdgeToTargetRealtimePost", fields: [target_node_id], references: [id])

  @@unique([source_node_id, target_node_id])
  @@map("realtime_edges")
}

model UserRealtimeRoom {
  id               BigInt       @id @default(autoincrement())
  user_id          BigInt
  realtime_room_id String
  joined_at        DateTime     @default(now()) @db.Timestamptz(6)
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, realtime_room_id])
  @@map("users_realtime_rooms")
}

model RealtimeRoomInviteToken {
  id               BigInt       @id @default(autoincrement())
  token            String       @unique
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  expiration_date  DateTime?
  realtime_room_id String
  inviting_user_id BigInt
  inviting_user    User         @relation(fields: [inviting_user_id], references: [id], onDelete: Cascade)
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)

  @@map("realtime_room_invite_tokens")
}

model Follow {
  id           BigInt   @id @default(autoincrement())
  follower_id  BigInt
  following_id BigInt
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  follower     User     @relation("FollowingRelation", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("FollowerRelation", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@map("follows")
}

model ArchivedPost {
  id               BigInt    @id @default(autoincrement())
  original_post_id BigInt    @unique
  created_at       DateTime  @db.Timestamptz(6)
  content          String
  author_id        BigInt
  updated_at       DateTime? @db.Timestamptz(6)
  parent_id        BigInt?
  like_count       Int       @default(0)
  expiration_date  DateTime?
  archived_at      DateTime  @default(now()) @db.Timestamptz(6)
  author           User      @relation(fields: [author_id], references: [id])

  @@map("archived_posts")
}

model ArchivedRealtimePost {
  id                 BigInt             @id @default(autoincrement())
  original_post_id   BigInt             @unique
  created_at         DateTime           @db.Timestamptz(6)
  content            String?
  image_url          String?
  video_url          String?
  caption            String?
  author_id          BigInt
  updated_at         DateTime?          @db.Timestamptz(6)
  like_count         Int                @default(0)
  x_coordinate       Decimal
  y_coordinate       Decimal
  type               realtime_post_type @default(TEXT)
  realtime_room_id   String
  locked             Boolean            @default(false)
  collageLayoutStyle String?
  collageColumns     Int?
  collageGap         Int?
  isPublic           Boolean            @default(false)
  pluginType         String?
  pluginData         Json?
  parent_id          BigInt?
  expiration_date    DateTime?
  archived_at        DateTime           @default(now()) @db.Timestamptz(6)
  author             User               @relation(fields: [author_id], references: [id])

  @@map("archived_realtime_posts")
}

model UserEmbedding {
  user_id    BigInt   @id
  embedding  Float[]
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_embeddings")
}

model FriendSuggestion {
  id                BigInt   @id @default(autoincrement())
  user_id           BigInt
  suggested_user_id BigInt
  score             Float
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  suggestedUser     User     @relation("SuggestionsTarget", fields: [suggested_user_id], references: [id], onDelete: Cascade)
  user              User     @relation("SuggestionsCreator", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, suggested_user_id])
  @@map("friend_suggestions")
}

model Workflow {
  id                 BigInt               @id @default(autoincrement())
  owner_id           BigInt
  name               String
  graph              Json
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  scheduledWorkflows ScheduledWorkflow[]
  runs               WorkflowRun[]
  states             WorkflowState[]
  transitions        WorkflowTransition[]
  owner              User                 @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowState {
  id              BigInt               @id @default(autoincrement())
  workflow_id     BigInt
  version         Int
  graph           Json
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  workflow        Workflow             @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  fromTransitions WorkflowTransition[] @relation("WorkflowTransitionFromState")
  toTransitions   WorkflowTransition[] @relation("WorkflowTransitionToState")

  @@unique([workflow_id, version])
  @@map("workflow_states")
}

model WorkflowTransition {
  id            BigInt        @id @default(autoincrement())
  workflow_id   BigInt
  from_state_id BigInt
  to_state_id   BigInt
  version       Int
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  fromState     WorkflowState @relation("WorkflowTransitionFromState", fields: [from_state_id], references: [id])
  toState       WorkflowState @relation("WorkflowTransitionToState", fields: [to_state_id], references: [id])
  workflow      Workflow      @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@map("workflow_transitions")
}

model UserAttributeEdit {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_attribute_edits")
}

model RecommendationClick {
  id                  BigInt   @id @default(autoincrement())
  user_id             BigInt
  recommended_user_id BigInt?
  recommended_room_id String?
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("recommendation_clicks")
}

model ScheduledWorkflow {
  id          BigInt   @id @default(autoincrement())
  workflow_id BigInt
  cron        String?
  trigger     String?
  metadata    Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  workflow    Workflow @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@map("scheduled_workflows")
}

model Integration {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  service    String
  credential String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, service])
  @@index([user_id])
  @@map("integrations")
}

model LinkedAccount {
  id            BigInt    @id @default(autoincrement())
  user_id       BigInt
  provider      String
  access_token  String
  refresh_token String
  expires_at    DateTime? @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, provider])
  @@index([user_id])
  @@map("linked_accounts")
}

model ProductReview {
  id               BigInt               @id @default(autoincrement())
  realtime_post_id BigInt?              @unique
  feed_post_id     BigInt?              @unique
  author_id        BigInt
  product_name     String
  rating           Int
  summary          String?
  created_at       DateTime             @default(now()) @db.Timestamptz(6)
  updated_at       DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  product_link     String?
  image_urls       String[]
  claims           ProductReviewClaim[]
  author           User                 @relation(fields: [author_id], references: [id], onDelete: Cascade)
  realtime_post    RealtimePost?        @relation(fields: [realtime_post_id], references: [id])
  feed_post        FeedPost?            @relation(fields: [feed_post_id], references: [id])

  @@map("product_reviews")
}

model ProductReviewClaim {
  id              BigInt               @id @default(autoincrement())
  review_id       BigInt
  text            String
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  helpful_count   Int                  @default(0)
  unhelpful_count Int                  @default(0)
  vouch_total     Int                  @default(0)
  review          ProductReview        @relation(fields: [review_id], references: [id], onDelete: Cascade)
  votes           ProductReviewVote[]
  vouches         ProductReviewVouch[]

  @@map("product_review_claims")
}

model ProductReviewVote {
  id         BigInt             @id @default(autoincrement())
  claim_id   BigInt
  user_id    BigInt
  type       String
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  claim      ProductReviewClaim @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([claim_id, user_id])
  @@map("product_review_votes")
}

model ProductReviewVouch {
  id         BigInt             @id @default(autoincrement())
  claim_id   BigInt
  user_id    BigInt
  amount     Int
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  claim      ProductReviewClaim @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([claim_id, user_id])
  @@map("product_review_vouches")
}

model WorkflowRun {
  id          BigInt    @id @default(autoincrement())
  workflow_id BigInt
  started_at  DateTime  @default(now())
  finished_at DateTime?
  executed    Json
  workflow    Workflow  @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@index([workflow_id])
  @@map("workflow_runs")
}

model Conversation {
  id            BigInt                    @id @default(autoincrement())
  user1_id      BigInt?
  user2_id      BigInt?
  created_at    DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime                  @default(now()) @updatedAt @db.Timestamptz(6)
  title         String?
  is_group      Boolean                   @default(false)
  user1         User?                     @relation("ConversationUser1", fields: [user1_id], references: [id])
  user2         User?                     @relation("ConversationUser2", fields: [user2_id], references: [id])
  messages      Message[]
  notifications Notification[]            @relation("NotificationConversation")
  participants  ConversationParticipant[]

  @@unique([user1_id, user2_id])
  @@index([user1_id])
  @@index([user2_id])
  @@map("conversations")
}

model ConversationParticipant {
  id              BigInt       @id @default(autoincrement())
  conversation_id BigInt
  user_id         BigInt
  joined_at       DateTime     @default(now()) @db.Timestamptz(6)
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([conversation_id, user_id])
  @@index([user_id])
  @@map("conversation_participants")
}

model MessageAttachment {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  message_id BigInt
  path       String
  type       String
  size       Int
  metadata   Json?
  message    Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@index([message_id])
  @@map("message_attachments")
}

model Message {
  id              BigInt              @id @default(autoincrement())
  conversation_id BigInt
  sender_id       BigInt
  text            String?
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  conversation    Conversation        @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User                @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  notifications   Notification[]      @relation("NotificationMessage")
  attachments     MessageAttachment[]

  @@index([conversation_id, created_at])
  @@map("messages")
}

model CanonicalMedia {
  id            String         @id
  title         String
  mediaType     String
  metadata      Json?
  embedding     Float[]
  updatedAt     DateTime       @updatedAt
  favoriteItems FavoriteItem[]

  @@map("canonical_media")
}

model FavoriteItem {
  mediaId String
  rating  Int?
  addedAt DateTime       @default(now())
  userId  BigInt
  media   CanonicalMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, mediaId])
  @@index([userId])
  @@map("favorite_items")
}

model Notification {
  id              BigInt            @id @default(autoincrement())
  user_id         BigInt
  actor_id        BigInt
  type            notification_type
  conversation_id BigInt?
  message_id      BigInt?
  market_id       String?
  trade_id        String?
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  read            Boolean           @default(false)
  actor           User              @relation("NotificationActor", fields: [actor_id], references: [id], onDelete: Cascade)
  conversation    Conversation?     @relation("NotificationConversation", fields: [conversation_id], references: [id], onDelete: Cascade)
  message         Message?          @relation("NotificationMessage", fields: [message_id], references: [id], onDelete: Cascade)
  market          PredictionMarket? @relation("PredictionMarketNotifications", fields: [market_id], references: [id])
  trade           Trade?            @relation("TradeNotifications", fields: [trade_id], references: [id])
  user            User              @relation("NotificationUser", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("notifications")
}

model PortfolioPage {
  id         BigInt   @id @default(autoincrement())
  slug       String   @unique
  html       String
  css        String
  tsx        String? // existing
  payload    Json? // <‑‑ NEW (optional)
  snapshot   String? // <‑‑ NEW (optional helper)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("portfolio_pages")
}

model scroll_events {
  id         BigInt   @id @default(autoincrement())
  user_id    String   @db.Uuid
  content_id String?  @db.Uuid
  dwell_ms   Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "scroll_events_user_idx")
}

model user_taste_vectors {
  user_id    BigInt                @id
  taste      Unsupported("vector")
  traits     Json?                 @default("{}")
  updated_at DateTime              @default(now()) @db.Timestamptz(6)

  @@index([taste], map: "user_taste_vectors_ann")
}

model track_embedding {
  vector    Unsupported("vector")
  createdAt DateTime              @default(now())
  track_id  String                @id

  @@map("track_embedding")
}

model UserSimilarityKnn {
  user_id      BigInt
  neighbour_id BigInt
  sim          Float
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  @@id([user_id, neighbour_id])
  @@map("user_similarity_knn")
}

model PredictionMarket {
  id         String          @id @default(cuid())
  postId     BigInt          @unique
  question   String          @db.VarChar(140)
  closesAt   DateTime
  closedAt   DateTime?
  resolvesAt DateTime?
  state      PredictionState @default(OPEN)
  outcome    MarketOutcome?
  b          Float           @default(100)
  yesPool    Float           @default(0)
  noPool     Float           @default(0)
  creatorId  BigInt
  oracleId   BigInt?

  trades         Trade[]
  notifications  Notification[]  @relation("PredictionMarketNotifications")
  post           FeedPost        @relation("FeedPostPrediction", fields: [postId], references: [id])
  creator        User            @relation("CreatedPredictionMarkets", fields: [creatorId], references: [id])
  oracle         User?           @relation("OraclePredictionMarkets", fields: [oracleId], references: [id])
  RealtimePost   RealtimePost[]
  resolutionLogs ResolutionLog[]

  @@map("prediction_markets")
}

model Trade {
  id        String        @id @default(cuid())
  marketId  String
  userId    BigInt
  side      MarketOutcome
  shares    Float
  price     Float
  cost      Int
  createdAt DateTime      @default(now()) @db.Timestamptz(6)

  market        PredictionMarket @relation(fields: [marketId], references: [id])
  user          User             @relation("UserTrades", fields: [userId], references: [id])
  notifications Notification[]   @relation("TradeNotifications")

  @@index([marketId])
  @@index([userId])
  @@index([marketId, userId], name: "idx_trade_market_user")
  @@map("prediction_trades")
}

model Wallet {
  userId       BigInt @id
  balanceCents Int    @default(0)
  lockedCents  Int    @default(0)

  user User @relation(fields: [userId], references: [id])

  @@map("wallet")
}

model ResolutionLog {
  id         BigInt            @id @default(autoincrement())
  market     PredictionMarket  @relation(fields: [marketId], references: [id])
  marketId   String
  resolver   User              @relation(fields: [resolverId], references: [id])
  resolverId BigInt
  outcome    ResolutionOutcome
  createdAt  DateTime          @default(now())

  @@map("resolution_log")
}

enum ResolutionOutcome {
  YES
  NO
  N_A
}

enum PredictionState {
  OPEN
  CLOSED
  RESOLVED
}

enum MarketOutcome {
  YES
  NO
}

enum like_type {
  LIKE
  DISLIKE
}

enum realtime_post_type {
  TEXT
  VIDEO
  IMAGE
  LIVESTREAM
  IMAGE_COMPUTE
  COLLAGE
  GALLERY
  PORTAL
  AUDIO
  DRAW
  LIVECHAT
  DOCUMENT
  THREAD
  CODE
  PORTFOLIO
  LLM_INSTRUCTION
  PREDICTION
  PLUGIN
  PRODUCT_REVIEW
  ENTROPY
  MUSIC
  ROOM_CANVAS
}

enum visibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum notification_type {
  FOLLOW
  MESSAGE
  TRADE_EXECUTED
  MARKET_RESOLVED
}

model Section {
  id           BigInt   @id @default(autoincrement())
  x            Int
  y            Int
  visitors     Int      @default(0)
  liveCount    Int      @default(0)
  auctionCount Int      @default(0)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  stalls       Stall[]

  @@unique([x, y])
  @@map("section") // 👈 tell Prisma the real table name
}

model Stall {
  id           BigInt         @id @default(autoincrement())
  section_id   BigInt?
  owner_id     BigInt
  name         String
  seller_id    BigInt?
  seller       Seller?        @relation(fields: [seller_id], references: [id])
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  section      Section?       @relation(fields: [section_id], references: [id])
  owner        User           @relation(fields: [owner_id], references: [id])
  items        Item[]
  auctions     Auction[]
  orders       Order[]
  images       StallImage[]
  StallMessage StallMessage[]
  live         Boolean        @default(false)
  liveSrc      String? // nullable -> no stream yet
  doc          Json?
  Offer        Offer[]

  @@unique([section_id, owner_id])
  @@index([section_id])
  @@index([owner_id, updated_at])
  @@map("stalls")
}

model StallImage {
  id         BigInt   @id @default(autoincrement())
  stall_id   BigInt
  url        String
  blurhash   String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  position   Int      @default(0)
  stall      Stall    @relation(fields: [stall_id], references: [id])

  @@index([stall_id, position])
  @@map("stall_image")
}

// ---------- ITEM ----------
model Item {
  id          BigInt   @id @default(autoincrement())
  stall_id    BigInt
  name        String
  description String
  price       Decimal? @db.Decimal(12, 2)
  currency    String   @default("usd")
  stock       Int
  images      String[] // PG array
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  stall      Stall       @relation(fields: [stall_id], references: [id])
  offers     Offer[]
  auction    Auction?
  orderItems OrderItem[]
  cartItems  CartItem[]
  OrderLine  OrderLine[]

  @@index([stall_id])
  @@map("items")
}

model Seller {
  id                   BigInt  @id @default(autoincrement()) // <-- give Seller the ids
  stripeAccountId      String? @unique
  stripeChargesEnabled Boolean @default(false)
  stalls               Stall[]
  Offer                Offer[]
}

// ---------- OFFER ----------
model Offer {
  id            BigInt      @id @default(autoincrement())
  stall_id      BigInt
  item_id       BigInt?
  buyer_id      BigInt
  seller_id     BigInt
  amount        Decimal     @db.Decimal(12, 2)
  currency      String      @default("usd")
  status        OfferStatus @default(PENDING)
  counter_of_id BigInt?
  expires_at    DateTime?
  version       Int         @default(1)
  message       String?
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamptz(6)

  stall  Stall  @relation(fields: [stall_id], references: [id])
  item   Item?  @relation(fields: [item_id], references: [id])
  buyer  User   @relation(fields: [buyer_id], references: [id])
  seller Seller @relation(fields: [seller_id], references: [id])

  counterOf Offer?  @relation("OfferCounters", fields: [counter_of_id], references: [id])
  counters  Offer[] @relation("OfferCounters")

  // reservation for checkout
  cart       Cart?        @relation("CartOffer")
  OfferEvent OfferEvent[]

  @@index([stall_id, status])
  @@index([buyer_id, status])
  @@index([item_id, status])
  @@map("offers")
}

enum OfferEventKind {
  CREATED
  COUNTERED
  ACCEPTED
  REJECTED
  EXPIRED
}

model OfferEvent {
  id         BigInt         @id @default(autoincrement())
  offer_id   BigInt
  kind       OfferEventKind
  payload    Json?
  created_at DateTime       @default(now()) @db.Timestamptz(6)

  offer Offer @relation(fields: [offer_id], references: [id])

  @@index([offer_id])
  @@map("offer_events")
}

// ---------- AUCTION / BID ----------
model Auction {
  id         BigInt        @id @default(autoincrement())
  item_id    BigInt        @unique
  stall_id   BigInt
  reserve    Decimal       @db.Decimal(12, 2)
  currency   String        @default("usd")
  ends_at    DateTime
  state      auction_state @default(LIVE)
  winner_id  BigInt?
  created_at DateTime      @default(now()) @db.Timestamptz(6)

  item   Item    @relation(fields: [item_id], references: [id])
  stall  Stall   @relation(fields: [stall_id], references: [id])
  winner User?   @relation(fields: [winner_id], references: [id])
  bids   Bid[]
  Order  Order[]

  @@index([stall_id])
  @@index([ends_at, state])
  @@map("auctions")
}

model Bid {
  id         BigInt   @id @default(autoincrement())
  auction_id BigInt
  bidder_id  BigInt
  amount     Decimal  @db.Decimal(12, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  auction Auction @relation(fields: [auction_id], references: [id])
  bidder  User    @relation(fields: [bidder_id], references: [id])

  @@index([auction_id, created_at])
  @@map("bids")
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum OrderStatus {
  PENDING_PAYMENT
  AUTHORIZED
  PAID
  FULFILLED
  RELEASED
  DISPUTED
  REFUNDED
  CANCELLED
}

// ---------- ORDERS / CART / ESCROW ----------
model Order {
  id           BigInt      @id @default(autoincrement())
  stall_id     BigInt
  buyer_id     BigInt?
  auction_id   BigInt?
  status       OrderStatus @default(PENDING_PAYMENT)
  subtotal     Decimal?    @db.Decimal(12, 2)
  shipping     Decimal?    @db.Decimal(12, 2)
  total        Decimal?    @db.Decimal(12, 2)
  currency     String      @default("usd")
  stripePI     String?
  pmId         String?
  fulfilled_at DateTime?
  released_at  DateTime?
  hold_days    Int         @default(3)
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  updated_at   DateTime    @default(now()) @updatedAt @db.Timestamptz(6)

  stall   Stall    @relation(fields: [stall_id], references: [id])
  buyer   User?    @relation(fields: [buyer_id], references: [id])
  auction Auction? @relation(fields: [auction_id], references: [id])

  items     OrderItem[]
  OrderLine OrderLine[]

  @@index([stall_id, status])
  @@map("orders")
}

model OrderItem {
  id         BigInt   @id @default(autoincrement())
  order_id   BigInt
  item_id    BigInt
  qty        Int
  unit_price Decimal? @db.Decimal(12, 2) // TEMP: nullable if you just added it
  created_at DateTime @default(now()) @db.Timestamptz(6)

  order Order @relation(fields: [order_id], references: [id])
  item  Item  @relation(fields: [item_id], references: [id])

  @@index([order_id])
  @@map("order_items")
}

model OrderLine {
  id          BigInt   @id @default(autoincrement())
  order_id    BigInt?
  item_id     BigInt?
  quantity    Int?
  price_cents Int?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  order       Order?   @relation(fields: [order_id], references: [id])
  item        Item?    @relation(fields: [item_id], references: [id])

  @@index([order_id])
  @@map("order_lines")
}

model StallMessage {
  id         BigInt   @id @default(autoincrement())
  stall_id   BigInt
  user_id    BigInt
  text       String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  stall Stall @relation(fields: [stall_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@index([stall_id])
  @@map("stall_messages")
}

model CartItem {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  item_id    BigInt
  qty        Int      @default(1)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id])
  item Item @relation(fields: [item_id], references: [id])

  @@unique([user_id, item_id])
  @@map("cart_items")
}

enum escrow_state {
  PENDING
  HELD
  RELEASED
  REFUNDED
}

// Offer reservation (one-per-offer)
model Cart {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  offer_id   BigInt   @unique
  deadline   DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  offer  Offer   @relation("CartOffer", fields: [offer_id], references: [id])
  user   User    @relation(fields: [user_id], references: [id])
  escrow Escrow? @relation("CartEscrow")

  @@index([user_id])
  @@map("cart")
}

model Escrow {
  id         BigInt       @id @default(autoincrement())
  cart_id    BigInt       @unique
  state      escrow_state @default(PENDING)
  tx_ref     String?
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  updated_at DateTime     @default(now()) @updatedAt @db.Timestamptz(6)

  cart Cart @relation("CartEscrow", fields: [cart_id], references: [id])

  @@map("escrow")
}

model PartyPresence {
  id         String   @id @default(cuid())
  party_id   String
  user_id    BigInt
  x          Int
  y          Int
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([party_id])
  @@map("party_presence")
}

model StallHeat {
  id       BigInt @id @default(autoincrement())
  stall_id BigInt
  cell     Int
  views    Int

  @@unique([stall_id, cell], name: "stall_id_cell")
  @@map("stall_heat")
}

model GroupMeeting {
  id              String   @id @default(uuid())
  title           String?
  participantUids String[]
  origins         Json?
  votes           Json?
  status          String   @default("init")
  createdAt       DateTime @default(now())

  @@map("group_meetings")
}

model UserSettings {
  user_id    BigInt   @id
  prefs      Json     @default("{}")
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model WorkspaceSettings {
  workspace_id BigInt   @id
  prefs        Json     @default("{}")
  updated_at   DateTime @updatedAt

  @@map("workspace_settings")
}

model Telemetry {
  id        BigInt   @id @default(autoincrement())
  event     String
  coords    String
  userId    BigInt?
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@index([event, createdAt])
}

enum auction_state {
  LIVE
  CLOSED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model Article {
  id           String        @id @default(uuid())
  authorId     String
  title        String
  slug         String        @unique
  heroImageKey String?
  template     String        @default("standard")
  astJson      Json
  status       ArticleStatus @default(DRAFT)
  revisions    Revision[]
  analytics    Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("articles")
}

model Revision {
  id        String   @id @default(uuid())
  articleId String
  astJson   Json
  createdAt DateTime @default(now())

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_revisions")
}
