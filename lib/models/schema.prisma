generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                       BigInt                    @id @default(dbgenerated("user_id_sequence"))
  auth_id                  String                    @unique
  created_at               DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                 @default(now()) @updatedAt @db.Timestamptz(6)
  username                 String                    @db.VarChar
  name                     String
  image                    String?
  bio                      String?
  onboarded                Boolean                   @default(false)
  likes                    Like[]
  posts                    Post[]
  realtimeposts            RealtimePost[]
  realtimeedges            RealtimeEdge[]
  userAttributes           UserAttributes[]
  realtimerooms            UserRealtimeRoom[]
  realtimeRoomInviteTokens RealtimeRoomInviteToken[]

  @@map("users")
}

model UserAttributes {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt   @unique
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  artists    String[]
  albums     String[]
  songs      String[]
  interests  String[]
  movies     String[]

  @@map("user_attributes")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Post {
  id         BigInt    @id @default(dbgenerated("post_id_sequence"))
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  content    String
  author_id  BigInt
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  parent_id  BigInt?
  like_count Int       @default(0)
  like       Like[]
  author     User      @relation(fields: [author_id], references: [id], onDelete: Restrict)
  post       Post?     @relation("children", fields: [parent_id], references: [id], onDelete: Restrict)
  children   Post[]    @relation("children")

  @@map("posts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Like {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  score      Int
  type       like_type @default(LIKE)
  user_id    BigInt
  post_id    BigInt
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  post       Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@map("likes")
}

enum like_type {
  LIKE
  DISLIKE
}

model RealtimeRoom {
  id                       String                    @id
  created_at               DateTime                  @default(now()) @db.Timestamptz(6)
  room_icon                String
  realtimeposts            RealtimePost[]
  realtimeedges            RealtimeEdge[]
  members                  UserRealtimeRoom[]
  realtimeRoomInviteTokens RealtimeRoomInviteToken[]

  @@map("realtime_rooms")
}

model RealtimePost {
  id               BigInt             @id @default(dbgenerated("realtime_post_id_sequence"))
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  content          String?
  image_url        String?
  video_url        String?
  author_id        BigInt
  updated_at       DateTime?          @default(now()) @updatedAt @db.Timestamptz(6)
  like_count       Int                @default(0)
  author           User               @relation(fields: [author_id], references: [id], onDelete: Restrict)
  x_coordinate     Decimal
  y_coordinate     Decimal
  type             realtime_post_type @default(TEXT)
  outgoing_edges   RealtimeEdge[]     @relation(name: "RealtimeEdgeToSourceRealtimePost")
  incoming_edges   RealtimeEdge[]     @relation(name: "RealtimeEdgeToTargetRealtimePost")
  realtimeroom     RealtimeRoom       @relation(fields: [realtime_room_id], references: [id])
  realtime_room_id String
  locked           Boolean
  collageLayoutStyle String?  // "grid", "bento", "scrapbook"
  collageColumns     Int?
  collageGap         Int?

  @@map("realtime_posts")
}

model RealtimeEdge {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  source_node_id   BigInt
  sourceNode       RealtimePost @relation(name: "RealtimeEdgeToSourceRealtimePost", fields: [source_node_id], references: [id], onDelete: Restrict)
  target_node_id   BigInt
  targetNode       RealtimePost @relation(name: "RealtimeEdgeToTargetRealtimePost", fields: [target_node_id], references: [id], onDelete: Restrict)
  author_id        BigInt
  author           User         @relation(fields: [author_id], references: [id], onDelete: Restrict)
  realtimeroom     RealtimeRoom @relation(fields: [realtime_room_id], references: [id])
  realtime_room_id String

  @@unique([source_node_id, target_node_id])
  @@map("realtime_edges")
}

enum realtime_post_type {
  TEXT
  VIDEO
  IMAGE
  LIVESTREAM
  IMAGE_COMPUTE
  COLLAGE
}

model UserRealtimeRoom {
  id               BigInt       @id @default(autoincrement())
  user_id          BigInt
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  realtime_room_id String
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)
  joined_at        DateTime     @default(now()) @db.Timestamptz(6)

  @@unique([user_id, realtime_room_id])
  @@map("users_realtime_rooms")
}

model RealtimeRoomInviteToken {
  id               BigInt       @id @default(autoincrement())
  token            String       @unique
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  expiration_date  DateTime?
  realtime_room_id String
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)
  inviting_user_id BigInt
  inviting_user    User         @relation(fields: [inviting_user_id], references: [id], onDelete: Cascade)

  @@map("realtime_room_invite_tokens")
}
