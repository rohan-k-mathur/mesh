generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  engineType      = "library"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [vector]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                       BigInt                    @id @default(autoincrement())
  auth_id                  String                    @unique
  created_at               DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?                 @default(now()) @updatedAt @db.Timestamptz(6)
  username                 String                    @db.VarChar
  name                     String
  image                    String?
  bio                      String?
  onboarded                Boolean                   @default(false)
  archivedPosts            ArchivedPost[]
  archivedRealtimePosts    ArchivedRealtimePost[]
  following                Follow[]                  @relation("FollowingRelation")
  followers                Follow[]                  @relation("FollowerRelation")
  friendSuggestionsTarget  FriendSuggestion[]        @relation("SuggestionsTarget")
  friendSuggestionsCreated FriendSuggestion[]        @relation("SuggestionsCreator")
  likes                    Like[]
  posts                    Post[]
  realtimeedges            RealtimeEdge[]
  realtimeLikes            RealtimeLike[]
  realtimeposts            RealtimePost[]
  realtimeRoomInviteTokens RealtimeRoomInviteToken[]
  userAttributes           UserAttributes?
  userEmbedding            UserEmbedding?
  realtimerooms            UserRealtimeRoom[]
  workflows                Workflow[]
  attributeEdits           UserAttributeEdit[]
  recommendationClicks     RecommendationClick[]
  integrations             Integration[]
  linkedAccounts           LinkedAccount[]
  productReviews           ProductReview[]
  productReviewVotes       ProductReviewVote[]
  productReviewVouches     ProductReviewVouch[]
  conversationsUser1       Conversation[]            @relation("ConversationUser1")
  conversationsUser2       Conversation[]            @relation("ConversationUser2")
  messages                 Message[]
  favoriteItems            FavoriteItem[]
  /// notifications where this user **is the recipient**
  receivedNotifications    Notification[]            @relation("NotificationUser")

  /// notifications where this user **is the actor / sender**
  sentNotifications Notification[] @relation("NotificationActor")

  @@map("users")
}

model UserAttributes {
  id                  BigInt     @id @default(autoincrement())
  user_id             BigInt     @unique
  created_at          DateTime   @default(now()) @db.Timestamptz(6)
  artists             String[]
  albums              String[]
  songs               String[]
  interests           String[]
  movies              String[]
  birthday            DateTime?
  communities         String[]
  hobbies             String[]
  location            String?
  books               String[]
  events_visibility   visibility @default(PUBLIC)
  tv_visibility       visibility @default(PUBLIC)
  podcasts_visibility visibility @default(PUBLIC)
  updated_at          DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  user                User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_attributes")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Post {
  id              BigInt    @id @default(autoincrement())
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  content         String
  author_id       BigInt
  updated_at      DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  parent_id       BigInt?
  like_count      Int       @default(0)
  expiration_date DateTime?
  like            Like[]
  author          User      @relation(fields: [author_id], references: [id])
  post            Post?     @relation("children", fields: [parent_id], references: [id], onDelete: Restrict)
  children        Post[]    @relation("children")

  @@map("posts")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Like {
  id         BigInt    @id @default(autoincrement())
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  score      Int
  type       like_type @default(LIKE)
  user_id    BigInt
  post_id    BigInt
  updated_at DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  post       Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([post_id, user_id])
  @@map("likes")
}

model RealtimeLike {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  score            Int
  type             like_type    @default(LIKE)
  user_id          BigInt
  realtime_post_id BigInt
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  realtime_post    RealtimePost @relation(fields: [realtime_post_id], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([realtime_post_id, user_id])
  @@map("realtime_likes")
}

model RealtimeRoom {
  id                       String                    @id
  created_at               DateTime                  @default(now()) @db.Timestamptz(6)
  room_icon                String
  realtimeedges            RealtimeEdge[]
  realtimeposts            RealtimePost[]
  isPublic                 Boolean                   @default(false)
  isLounge                 Boolean                   @default(false)
  realtimeRoomInviteTokens RealtimeRoomInviteToken[]
  members                  UserRealtimeRoom[]

  @@map("realtime_rooms")
}

model RealtimePost {
  id                 BigInt             @id @default(autoincrement())
  created_at         DateTime           @default(now()) @db.Timestamptz(6)
  content            String?
  image_url          String?
  video_url          String?
  author_id          BigInt
  updated_at         DateTime?          @default(now()) @updatedAt @db.Timestamptz(6)
  like_count         Int                @default(0)
  x_coordinate       Decimal
  y_coordinate       Decimal
  type               realtime_post_type @default(TEXT)
  realtime_room_id   String
  locked             Boolean
  collageLayoutStyle String?
  collageColumns     Int?
  collageGap         Int?
  room_post_content  Json?
  isPublic           Boolean            @default(false)
  pluginType         String?
  pluginData         Json?
  parent_id          BigInt?
  outgoing_edges     RealtimeEdge[]     @relation("RealtimeEdgeToSourceRealtimePost")
  incoming_edges     RealtimeEdge[]     @relation("RealtimeEdgeToTargetRealtimePost")
  likes              RealtimeLike[]
  author             User               @relation(fields: [author_id], references: [id])
  realtimePost       RealtimePost?      @relation("RealtimePostChildren", fields: [parent_id], references: [id], onDelete: Restrict)
  children           RealtimePost[]     @relation("RealtimePostChildren")
  realtimeroom       RealtimeRoom       @relation(fields: [realtime_room_id], references: [id])
  productReview      ProductReview?

  @@map("realtime_posts")
}

model RealtimeEdge {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  source_node_id   BigInt
  target_node_id   BigInt
  author_id        BigInt
  realtime_room_id String
  author           User         @relation(fields: [author_id], references: [id])
  realtimeroom     RealtimeRoom @relation(fields: [realtime_room_id], references: [id])
  sourceNode       RealtimePost @relation("RealtimeEdgeToSourceRealtimePost", fields: [source_node_id], references: [id])
  targetNode       RealtimePost @relation("RealtimeEdgeToTargetRealtimePost", fields: [target_node_id], references: [id])

  @@unique([source_node_id, target_node_id])
  @@map("realtime_edges")
}

model UserRealtimeRoom {
  id               BigInt       @id @default(autoincrement())
  user_id          BigInt
  realtime_room_id String
  joined_at        DateTime     @default(now()) @db.Timestamptz(6)
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, realtime_room_id])
  @@map("users_realtime_rooms")
}

model RealtimeRoomInviteToken {
  id               BigInt       @id @default(autoincrement())
  token            String       @unique
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  expiration_date  DateTime?
  realtime_room_id String
  inviting_user_id BigInt
  inviting_user    User         @relation(fields: [inviting_user_id], references: [id], onDelete: Cascade)
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)

  @@map("realtime_room_invite_tokens")
}

model Follow {
  id           BigInt   @id @default(autoincrement())
  follower_id  BigInt
  following_id BigInt
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  follower     User     @relation("FollowingRelation", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("FollowerRelation", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@map("follows")
}

model ArchivedPost {
  id               BigInt    @id @default(autoincrement())
  original_post_id BigInt    @unique
  created_at       DateTime  @db.Timestamptz(6)
  content          String
  author_id        BigInt
  updated_at       DateTime? @db.Timestamptz(6)
  parent_id        BigInt?
  like_count       Int       @default(0)
  expiration_date  DateTime?
  archived_at      DateTime  @default(now()) @db.Timestamptz(6)
  author           User      @relation(fields: [author_id], references: [id])

  @@map("archived_posts")
}

model ArchivedRealtimePost {
  id                 BigInt             @id @default(autoincrement())
  original_post_id   BigInt             @unique
  created_at         DateTime           @db.Timestamptz(6)
  content            String?
  image_url          String?
  video_url          String?
  author_id          BigInt
  updated_at         DateTime?          @db.Timestamptz(6)
  like_count         Int                @default(0)
  x_coordinate       Decimal
  y_coordinate       Decimal
  type               realtime_post_type @default(TEXT)
  realtime_room_id   String
  locked             Boolean            @default(false)
  collageLayoutStyle String?
  collageColumns     Int?
  collageGap         Int?
  isPublic           Boolean            @default(false)
  pluginType         String?
  pluginData         Json?
  parent_id          BigInt?
  archived_at        DateTime           @default(now()) @db.Timestamptz(6)
  author             User               @relation(fields: [author_id], references: [id])

  @@map("archived_realtime_posts")
}

model UserEmbedding {
  user_id    BigInt   @id
  embedding  Float[]
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_embeddings")
}

model FriendSuggestion {
  id                BigInt   @id @default(autoincrement())
  user_id           BigInt
  suggested_user_id BigInt
  score             Float
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  suggestedUser     User     @relation("SuggestionsTarget", fields: [suggested_user_id], references: [id], onDelete: Cascade)
  user              User     @relation("SuggestionsCreator", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, suggested_user_id])
  @@map("friend_suggestions")
}

model Workflow {
  id                 BigInt               @id @default(autoincrement())
  owner_id           BigInt
  name               String
  graph              Json
  created_at         DateTime             @default(now()) @db.Timestamptz(6)
  owner              User                 @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  states             WorkflowState[]
  transitions        WorkflowTransition[]
  scheduledWorkflows ScheduledWorkflow[]
  runs               WorkflowRun[]

  @@map("workflows")
}

model WorkflowState {
  id              BigInt               @id @default(autoincrement())
  workflow_id     BigInt
  version         Int
  graph           Json
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  workflow        Workflow             @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  fromTransitions WorkflowTransition[] @relation("WorkflowTransitionFromState")
  toTransitions   WorkflowTransition[] @relation("WorkflowTransitionToState")

  @@unique([workflow_id, version])
  @@map("workflow_states")
}

model WorkflowTransition {
  id            BigInt        @id @default(autoincrement())
  workflow_id   BigInt
  from_state_id BigInt
  to_state_id   BigInt
  version       Int
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  workflow      Workflow      @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  fromState     WorkflowState @relation("WorkflowTransitionFromState", fields: [from_state_id], references: [id])
  toState       WorkflowState @relation("WorkflowTransitionToState", fields: [to_state_id], references: [id])

  @@map("workflow_transitions")
}

enum like_type {
  LIKE
  DISLIKE
}

model UserAttributeEdit {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_attribute_edits")
}

model RecommendationClick {
  id                  BigInt   @id @default(autoincrement())
  user_id             BigInt
  recommended_user_id BigInt?
  recommended_room_id String?
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("recommendation_clicks")
}

model ScheduledWorkflow {
  id          BigInt   @id @default(autoincrement())
  workflow_id BigInt
  cron        String?
  trigger     String?
  metadata    Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  workflow    Workflow @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@map("scheduled_workflows")
}

model Integration {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  service    String
  credential String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, service])
  @@index([user_id])
  @@map("integrations")
}

model LinkedAccount {
  id            BigInt    @id @default(autoincrement())
  user_id       BigInt
  provider      String
  access_token  String
  refresh_token String
  expires_at    DateTime? @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, provider])
  @@index([user_id])
  @@map("linked_accounts")
}

model ProductReview {
  id               BigInt               @id @default(autoincrement())
  realtime_post_id BigInt?              @unique
  author_id        BigInt
  product_name     String
  rating           Int
  summary          String?
  product_link     String?
  image_urls       String[]
  created_at       DateTime             @default(now()) @db.Timestamptz(6)
  updated_at       DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  author           User                 @relation(fields: [author_id], references: [id], onDelete: Cascade)
  realtime_post    RealtimePost?        @relation(fields: [realtime_post_id], references: [id])
  claims           ProductReviewClaim[]

  @@map("product_reviews")
}

model ProductReviewClaim {
  id              BigInt               @id @default(autoincrement())
  review_id       BigInt
  text            String
  helpful_count   Int                  @default(0)
  unhelpful_count Int                  @default(0)
  vouch_total     Int                  @default(0)
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  review          ProductReview        @relation(fields: [review_id], references: [id], onDelete: Cascade)
  votes           ProductReviewVote[]
  vouches         ProductReviewVouch[]

  @@map("product_review_claims")
}

model ProductReviewVote {
  id         BigInt             @id @default(autoincrement())
  claim_id   BigInt
  user_id    BigInt
  type       String
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  claim      ProductReviewClaim @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([claim_id, user_id])
  @@map("product_review_votes")
}

model ProductReviewVouch {
  id         BigInt             @id @default(autoincrement())
  claim_id   BigInt
  user_id    BigInt
  amount     Int
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  claim      ProductReviewClaim @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([claim_id, user_id])
  @@map("product_review_vouches")
}

model WorkflowRun {
  id          BigInt    @id @default(autoincrement())
  workflow_id BigInt
  started_at  DateTime  @default(now())
  finished_at DateTime?
  executed    Json
  workflow    Workflow  @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@index([workflow_id])
  @@map("workflow_runs")
}

model Conversation {
  id            BigInt         @id @default(autoincrement())
  user1_id      BigInt
  user2_id      BigInt
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  messages      Message[]
  user1         User           @relation("ConversationUser1", fields: [user1_id], references: [id])
  user2         User           @relation("ConversationUser2", fields: [user2_id], references: [id])
  notifications Notification[] @relation("NotificationConversation")

  @@unique([user1_id, user2_id])
  @@index([user1_id])
  @@index([user2_id])
  @@map("conversations")
}

model Message {
  id              BigInt         @id @default(autoincrement())
  conversation_id BigInt
  sender_id       BigInt
  text            String
  created_at      DateTime       @default(now()) @db.Timestamptz(6)
  conversation    Conversation   @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User           @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  notifications   Notification[] @relation("NotificationMessage")

  @@index([conversation_id])
  @@map("messages")
}

model CanonicalMedia {
  id        String   @id
  title     String
  mediaType String
  metadata  Json?
  embedding Float[]
  updatedAt DateTime @updatedAt

  favoriteItems FavoriteItem[]

  @@map("canonical_media")
}

model FavoriteItem {
  userId  BigInt
  mediaId String
  rating  Int?
  addedAt DateTime       @default(now())
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  media   CanonicalMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([userId, mediaId])
  @@index([userId])
  @@map("favorite_items")
}

model Notification {
  id              BigInt            @id @default(autoincrement())
  user_id         BigInt
  actor_id        BigInt
  type            notification_type
  conversation_id BigInt?
  message_id      BigInt?
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  read            Boolean           @default(false)

  /**
   * user ↔ actor relations (already named)
   */
  user  User @relation("NotificationUser", fields: [user_id], references: [id], onDelete: Cascade)
  actor User @relation("NotificationActor", fields: [actor_id], references: [id], onDelete: Cascade)

  /**
   * add relation names that match the arrays above
   */
  conversation Conversation? @relation("NotificationConversation", fields: [conversation_id], references: [id], onDelete: Cascade)
  message      Message?      @relation("NotificationMessage", fields: [message_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("notifications")
}

model PortfolioPage {
  id         BigInt   @id @default(autoincrement())
  slug       String   @unique
  html       String
  css        String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@map("portfolio_pages")
}

model scroll_events {
  id         BigInt   @id @default(autoincrement())
  user_id    String   @db.Uuid
  content_id String?  @db.Uuid
  dwell_ms   Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "scroll_events_user_idx")
}

model user_taste_vectors {
  user_id    BigInt                @id
  taste      Unsupported("vector")
  traits     Json?                 @default("{}")
  updated_at DateTime              @default(now()) @db.Timestamptz(6)

  @@index([taste], map: "user_taste_vectors_ann")
}

enum realtime_post_type {
  TEXT
  VIDEO
  IMAGE
  LIVESTREAM
  IMAGE_COMPUTE
  COLLAGE
  GALLERY
  PORTAL
  AUDIO
  DRAW
  LIVECHAT
  DOCUMENT
  THREAD
  CODE
  PORTFOLIO
  LLM_INSTRUCTION
  PLUGIN
  PRODUCT_REVIEW
  ENTROPY
  MUSIC
  ROOM_CANVAS
}

enum visibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum notification_type {
  FOLLOW
  MESSAGE
}

model track_embedding {
  track_id  String   @id @db.Text
  vector    Float[] // This will map to the vector type
  createdAt DateTime @default(now())
}
