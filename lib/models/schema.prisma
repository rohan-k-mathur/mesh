generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  engineType      = "library"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                        BigInt                    @id @default(autoincrement())
  auth_id                   String                    @unique
  created_at                DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at                DateTime?                 @default(now()) @updatedAt @db.Timestamptz(6)
  username                  String                    @db.VarChar
  name                      String
  image                     String?
  bio                       String?
  onboarded                 Boolean                   @default(false)
  archivedPosts             ArchivedPost[]
  archivedRealtimePosts     ArchivedRealtimePost[]
  conversationsUser1        Conversation[]            @relation("ConversationUser1")
  conversationsUser2        Conversation[]            @relation("ConversationUser2")
  conversation_participants ConversationParticipant[]
  favoriteItems             FavoriteItem[]
  following                 Follow[]                  @relation("FollowingRelation")
  followers                 Follow[]                  @relation("FollowerRelation")
  friendSuggestionsTarget   FriendSuggestion[]        @relation("SuggestionsTarget")
  friendSuggestionsCreated  FriendSuggestion[]        @relation("SuggestionsCreator")
  integrations              Integration[]
  likes                     Like[]
  linkedAccounts            LinkedAccount[]
  messages                  Message[]
  sentNotifications         Notification[]            @relation("NotificationActor")
  receivedNotifications     Notification[]            @relation("NotificationUser")
  productReviewVotes        ProductReviewVote[]
  productReviewVouches      ProductReviewVouch[]
  productReviews            ProductReview[]
  realtimeedges             RealtimeEdge[]
  realtimeLikes             RealtimeLike[]
  realtimeposts             RealtimePost[]
  feedPosts                 FeedPost[]
  libraryPosts              LibraryPost[]
  stacks                    Stack[]
  portfolioPages            PortfolioPage[] // 👈 back-relation
  annotations               Annotation[]
  realtimeRoomInviteTokens  RealtimeRoomInviteToken[]
  recommendationClicks      RecommendationClick[]
  attributeEdits            UserAttributeEdit[]
  userAttributes            UserAttributes?
  userEmbedding             UserEmbedding?
  createdPredictionMarkets  PredictionMarket[]        @relation("CreatedPredictionMarkets")
  oraclePredictionMarkets   PredictionMarket[]        @relation("OraclePredictionMarkets")
  trades                    Trade[]                   @relation("UserTrades")
  wallet                    Wallet?
  resolutionLogs            ResolutionLog[]
  realtimerooms             UserRealtimeRoom[]
  workflows                 Workflow[]
  stalls                    Stall[]
  offers                    Offer[]
  bids                      Bid[]
  orders                    Order[]
  StallMessage              StallMessage[]
  cartItems                 CartItem[]
  carts                     Cart[]
  settings                  UserSettings?
  Auction                   Auction[]
  StackCollaborator         StackCollaborator[]
  StackSubscription         StackSubscription[]
  SheafAudienceList         SheafAudienceList[]
  roles                     UserRole[]
  reactions                 MessageReaction[]
  createdIssues             Issue[]                   @relation("CreatedIssues")
  assignedIssues            Issue[]                   @relation("AssignedIssues")

  driftMembers     DriftMember[]
  MessageMention   MessageMention[]
  // Stars & Bookmarks back-relations
  messageStars     MessageStar[]
  bookmarks        Bookmark[]
  ActivityPubKey   ActivityPubKey[]
  ApFollower       ApFollower[]
  ApFollowing      ApFollowing[]
  ApOutboxActivity ApOutboxActivity[]
  mergedReceipts   MergeReceipt[]     @relation("UserMergedReceipts")
  proposalSignals  ProposalSignal[]   @relation("UserProposalSignals")
  expertiseTags    String[]           @default([])

  @@map("users")
}

model UserAttributes {
  id                  BigInt     @id @default(autoincrement())
  user_id             BigInt     @unique
  created_at          DateTime   @default(now()) @db.Timestamptz(6)
  artists             String[]
  albums              String[]
  songs               String[]
  interests           String[]
  movies              String[]
  birthday            DateTime?
  communities         String[]
  hobbies             String[]
  location            String?
  books               String[]
  events_visibility   visibility @default(PUBLIC)
  tv_visibility       visibility @default(PUBLIC)
  podcasts_visibility visibility @default(PUBLIC)
  updated_at          DateTime   @default(now()) @updatedAt @db.Timestamptz(6)
  user                User       @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_attributes")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Like {
  id           BigInt    @id @default(autoincrement())
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  score        Int
  type         like_type @default(LIKE)
  user_id      BigInt
  updated_at   DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  feed_post_id BigInt
  feedPost     FeedPost  @relation(fields: [feed_post_id], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([feed_post_id, user_id])
  @@map("likes")
}

model FeedPost {
  id BigInt @id @default(autoincrement())

  created_at DateTime       @default(now()) @db.Timestamptz(6)
  updated_at DateTime?      @default(now()) @updatedAt @db.Timestamptz(6)
  author_id  BigInt
  type       feed_post_type
  content    String?
  image_url  String?
  portfolio  Json? // <-- add this

  video_url        String?
  caption          String?
  isPublic         Boolean           @default(true)
  like_count       Int               @default(0)
  expiration_date  DateTime?
  author           User              @relation(fields: [author_id], references: [id])
  predictionMarket PredictionMarket? @relation("FeedPostPrediction")
  productReview    ProductReview?
  libraryPost      LibraryPost?      @relation(fields: [library_post_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  stack            Stack?            @relation(fields: [stack_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  articleId        String?           @unique
  thumbnailKey     String? // 4:3 hero variant stored in CDN
  tldr             String? // 280-char summary
  parent_id        BigInt?
  pluginData       Json?
  pluginType       String?
  feedPost         FeedPost?         @relation("FeedPostChildren", fields: [parent_id], references: [id], onDelete: Restrict)
  children         FeedPost[]        @relation("FeedPostChildren")
  Like             Like[]

  library_post_id String?
  stack_id        String?

  @@index([created_at])
  @@index([library_post_id])
  @@index([stack_id])
  @@index([author_id])
  @@map("feed_posts")
}

enum feed_post_type {
  TEXT
  VIDEO
  IMAGE
  LIVESTREAM
  IMAGE_COMPUTE
  COLLAGE
  GALLERY
  PORTAL
  AUDIO
  DRAW
  LIVECHAT
  DOCUMENT
  THREAD
  CODE
  PORTFOLIO
  LLM_INSTRUCTION
  PREDICTION
  PLUGIN
  PRODUCT_REVIEW
  ENTROPY
  MUSIC
  ROOM_CANVAS
  ARTICLE
  LIBRARY
}

model RealtimeLike {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  score            Int
  type             like_type    @default(LIKE)
  user_id          BigInt
  realtime_post_id BigInt
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  realtime_post    RealtimePost @relation(fields: [realtime_post_id], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([realtime_post_id, user_id])
  @@map("realtime_likes")
}

model RealtimeRoom {
  id                       String                    @id
  created_at               DateTime                  @default(now()) @db.Timestamptz(6)
  room_icon                String
  isLounge                 Boolean                   @default(false)
  isPublic                 Boolean                   @default(false)
  realtimeedges            RealtimeEdge[]
  realtimeposts            RealtimePost[]
  realtimeRoomInviteTokens RealtimeRoomInviteToken[]
  members                  UserRealtimeRoom[]

  @@map("realtime_rooms")
}

model RealtimePost {
  id                 BigInt             @id @default(autoincrement())
  created_at         DateTime           @default(now()) @db.Timestamptz(6)
  content            String?
  image_url          String?
  video_url          String?
  caption            String?
  author_id          BigInt
  updated_at         DateTime?          @default(now()) @updatedAt @db.Timestamptz(6)
  like_count         Int                @default(0)
  x_coordinate       Decimal
  y_coordinate       Decimal
  type               realtime_post_type @default(TEXT)
  realtime_room_id   String
  locked             Boolean
  collageLayoutStyle String?
  collageColumns     Int?
  collageGap         Int?
  isPublic           Boolean            @default(false)
  parent_id          BigInt?
  expiration_date    DateTime?
  pluginData         Json?
  pluginType         String?
  room_post_content  Json?
  productReview      ProductReview?
  predictionMarket   PredictionMarket?  @relation(fields: [predictionMarketId], references: [id])
  outgoing_edges     RealtimeEdge[]     @relation("RealtimeEdgeToSourceRealtimePost")
  incoming_edges     RealtimeEdge[]     @relation("RealtimeEdgeToTargetRealtimePost")
  likes              RealtimeLike[]
  author             User               @relation(fields: [author_id], references: [id])
  realtimePost       RealtimePost?      @relation("RealtimePostChildren", fields: [parent_id], references: [id], onDelete: Restrict)
  children           RealtimePost[]     @relation("RealtimePostChildren")
  realtimeroom       RealtimeRoom       @relation(fields: [realtime_room_id], references: [id])
  predictionMarketId String?

  @@map("realtime_posts")
}

model RealtimeEdge {
  id               BigInt       @id @default(autoincrement())
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  source_node_id   BigInt
  target_node_id   BigInt
  author_id        BigInt
  realtime_room_id String
  author           User         @relation(fields: [author_id], references: [id])
  realtimeroom     RealtimeRoom @relation(fields: [realtime_room_id], references: [id])
  sourceNode       RealtimePost @relation("RealtimeEdgeToSourceRealtimePost", fields: [source_node_id], references: [id])
  targetNode       RealtimePost @relation("RealtimeEdgeToTargetRealtimePost", fields: [target_node_id], references: [id])

  @@unique([source_node_id, target_node_id])
  @@map("realtime_edges")
}

model UserRealtimeRoom {
  id               BigInt       @id @default(autoincrement())
  user_id          BigInt
  realtime_room_id String
  joined_at        DateTime     @default(now()) @db.Timestamptz(6)
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, realtime_room_id])
  @@map("users_realtime_rooms")
}

model RealtimeRoomInviteToken {
  id               BigInt       @id @default(autoincrement())
  token            String       @unique
  created_at       DateTime     @default(now()) @db.Timestamptz(6)
  expiration_date  DateTime?
  realtime_room_id String
  inviting_user_id BigInt
  inviting_user    User         @relation(fields: [inviting_user_id], references: [id], onDelete: Cascade)
  realtime_room    RealtimeRoom @relation(fields: [realtime_room_id], references: [id], onDelete: Cascade)

  @@map("realtime_room_invite_tokens")
}

model Follow {
  id           BigInt   @id @default(autoincrement())
  follower_id  BigInt
  following_id BigInt
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  follower     User     @relation("FollowingRelation", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("FollowerRelation", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@map("follows")
}

model ArchivedPost {
  id               BigInt    @id @default(autoincrement())
  original_post_id BigInt    @unique
  created_at       DateTime  @db.Timestamptz(6)
  content          String
  author_id        BigInt
  updated_at       DateTime? @db.Timestamptz(6)
  parent_id        BigInt?
  like_count       Int       @default(0)
  expiration_date  DateTime?
  archived_at      DateTime  @default(now()) @db.Timestamptz(6)
  author           User      @relation(fields: [author_id], references: [id])

  @@map("archived_posts")
}

model ArchivedRealtimePost {
  id                 BigInt             @id @default(autoincrement())
  original_post_id   BigInt             @unique
  created_at         DateTime           @db.Timestamptz(6)
  content            String?
  image_url          String?
  video_url          String?
  caption            String?
  author_id          BigInt
  updated_at         DateTime?          @db.Timestamptz(6)
  like_count         Int                @default(0)
  x_coordinate       Decimal
  y_coordinate       Decimal
  type               realtime_post_type @default(TEXT)
  realtime_room_id   String
  locked             Boolean            @default(false)
  collageLayoutStyle String?
  collageColumns     Int?
  collageGap         Int?
  isPublic           Boolean            @default(false)
  pluginType         String?
  pluginData         Json?
  parent_id          BigInt?
  expiration_date    DateTime?
  archived_at        DateTime           @default(now()) @db.Timestamptz(6)
  author             User               @relation(fields: [author_id], references: [id])

  @@map("archived_realtime_posts")
}

model UserEmbedding {
  user_id    BigInt   @id
  embedding  Float[]
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_embeddings")
}

model FriendSuggestion {
  id                BigInt   @id @default(autoincrement())
  user_id           BigInt
  suggested_user_id BigInt
  score             Float
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  suggestedUser     User     @relation("SuggestionsTarget", fields: [suggested_user_id], references: [id], onDelete: Cascade)
  user              User     @relation("SuggestionsCreator", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, suggested_user_id])
  @@map("friend_suggestions")
}

model Workflow {
  id              BigInt   @id @default(autoincrement())
  owner_id        BigInt
  name            String
  is_active       Boolean  @default(true)
  current_version Int      @default(1)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  versions           WorkflowVersion[]
  runs               WorkflowRun[]
  scheduledWorkflows ScheduledWorkflow[]
  // keep these if you still use the state-machine builder:
  states             WorkflowState[]
  transitions        WorkflowTransition[]

  owner User @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@map("workflows")
}

model WorkflowVersion {
  id          BigInt   @id @default(autoincrement())
  workflow_id BigInt
  version     Int
  dsl         Json // { steps: Step[], edges: Edge[] } for the linear builder
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  created_by  BigInt?

  workflow Workflow @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@unique([workflow_id, version])
  @@map("workflow_versions")
}

enum WorkflowRunStatus {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
  CANCELLED
  PAUSED
}

model WorkflowRun {
  id              BigInt            @id @default(autoincrement())
  workflow_id     BigInt
  version         Int
  status          WorkflowRunStatus @default(PENDING)
  trigger_kind    String? // "cron" | "webhook" | "manual"
  trigger_payload Json?
  started_at      DateTime          @default(now()) @db.Timestamptz(6)
  finished_at     DateTime?         @db.Timestamptz(6)
  error           Json?

  workflow Workflow          @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  steps    WorkflowRunStep[]

  @@index([workflow_id, started_at])
  @@map("workflow_runs")
}

enum StepStatus {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
  SKIPPED
}

model WorkflowRunStep {
  id          BigInt     @id @default(autoincrement())
  run_id      BigInt
  step_id     String // DSL Step.id
  action_ref  String?
  status      StepStatus @default(PENDING)
  input       Json?
  output      Json?
  error       Json?
  attempt     Int        @default(0)
  started_at  DateTime?  @db.Timestamptz(6)
  finished_at DateTime?  @db.Timestamptz(6)
  duration_ms Int?

  run WorkflowRun @relation(fields: [run_id], references: [id], onDelete: Cascade)

  @@index([run_id, step_id])
  @@map("workflow_run_steps")
}

model WorkflowState {
  id              BigInt               @id @default(autoincrement())
  workflow_id     BigInt
  version         Int
  graph           Json
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?            @default(now()) @updatedAt @db.Timestamptz(6)
  workflow        Workflow             @relation(fields: [workflow_id], references: [id], onDelete: Cascade)
  fromTransitions WorkflowTransition[] @relation("WorkflowTransitionFromState")
  toTransitions   WorkflowTransition[] @relation("WorkflowTransitionToState")

  @@unique([workflow_id, version])
  @@map("workflow_states")
}

model WorkflowTransition {
  id            BigInt        @id @default(autoincrement())
  workflow_id   BigInt
  from_state_id BigInt
  to_state_id   BigInt
  version       Int
  created_at    DateTime      @default(now()) @db.Timestamptz(6)
  fromState     WorkflowState @relation("WorkflowTransitionFromState", fields: [from_state_id], references: [id])
  toState       WorkflowState @relation("WorkflowTransitionToState", fields: [to_state_id], references: [id])
  workflow      Workflow      @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@map("workflow_transitions")
}

model UserAttributeEdit {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_attribute_edits")
}

model RecommendationClick {
  id                  BigInt   @id @default(autoincrement())
  user_id             BigInt
  recommended_user_id BigInt?
  recommended_room_id String?
  created_at          DateTime @default(now()) @db.Timestamptz(6)
  user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("recommendation_clicks")
}

model ScheduledWorkflow {
  id          BigInt   @id @default(autoincrement())
  workflow_id BigInt
  cron        String?
  trigger     String? // e.g., "webhook" (plus secret in metadata)
  metadata    Json?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  workflow Workflow @relation(fields: [workflow_id], references: [id], onDelete: Cascade)

  @@map("scheduled_workflows")
}

enum IntegrationStatus {
  CONNECTED
  NEEDS_REAUTH
  REVOKED
}

model Integration {
  id                   BigInt            @id @default(autoincrement())
  user_id              BigInt
  service              String
  external_account_id  String? // e.g. shop domain, gmail address, stripe_account id
  scopes               String[]          @default([]) // least-privilege scope list
  access_token_cipher  Bytes?
  refresh_token_cipher Bytes?
  expires_at           DateTime?         @db.Timestamptz(6)
  status               IntegrationStatus @default(CONNECTED)
  metadata             Json?

  // legacy field during transition (can remove after backfill)
  credential String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, service, external_account_id])
  @@index([user_id, service])
  @@map("integrations")
}

model LinkedAccount {
  id            BigInt    @id @default(autoincrement())
  user_id       BigInt
  provider      String
  access_token  String
  refresh_token String
  expires_at    DateTime? @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, provider])
  @@index([user_id])
  @@map("linked_accounts")
}

model ProductReview {
  id               BigInt               @id @default(autoincrement())
  realtime_post_id BigInt?              @unique
  feed_post_id     BigInt?              @unique
  author_id        BigInt
  product_name     String
  rating           Int
  summary          String?
  created_at       DateTime             @default(now()) @db.Timestamptz(6)
  updated_at       DateTime             @default(now()) @updatedAt @db.Timestamptz(6)
  product_link     String?
  image_urls       String[]
  claims           ProductReviewClaim[]
  author           User                 @relation(fields: [author_id], references: [id], onDelete: Cascade)
  realtime_post    RealtimePost?        @relation(fields: [realtime_post_id], references: [id])
  feed_post        FeedPost?            @relation(fields: [feed_post_id], references: [id])

  @@map("product_reviews")
}

model ProductReviewClaim {
  id              BigInt               @id @default(autoincrement())
  review_id       BigInt
  text            String
  created_at      DateTime             @default(now()) @db.Timestamptz(6)
  helpful_count   Int                  @default(0)
  unhelpful_count Int                  @default(0)
  vouch_total     Int                  @default(0)
  review          ProductReview        @relation(fields: [review_id], references: [id], onDelete: Cascade)
  votes           ProductReviewVote[]
  vouches         ProductReviewVouch[]

  @@map("product_review_claims")
}

model ProductReviewVote {
  id         BigInt             @id @default(autoincrement())
  claim_id   BigInt
  user_id    BigInt
  type       String
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  claim      ProductReviewClaim @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([claim_id, user_id])
  @@map("product_review_votes")
}

model ProductReviewVouch {
  id         BigInt             @id @default(autoincrement())
  claim_id   BigInt
  user_id    BigInt
  amount     Int
  created_at DateTime           @default(now()) @db.Timestamptz(6)
  claim      ProductReviewClaim @relation(fields: [claim_id], references: [id], onDelete: Cascade)
  user       User               @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([claim_id, user_id])
  @@map("product_review_vouches")
}

model Conversation {
  id              BigInt                    @id @default(autoincrement())
  user1_id        BigInt?
  user2_id        BigInt?
  created_at      DateTime                  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime                  @default(now()) @updatedAt @db.Timestamptz(6)
  title           String?
  is_group        Boolean                   @default(false)
  user1           User?                     @relation("ConversationUser1", fields: [user1_id], references: [id])
  user2           User?                     @relation("ConversationUser2", fields: [user2_id], references: [id])
  messages        Message[]
  notifications   Notification[]            @relation("NotificationConversation")
  participants    ConversationParticipant[]
  drifts          Drift[]                   @relation("ConversationDrifts")
  proposalSignals ProposalSignal[]          @relation("ConversationProposalSignals")
  Discussion      Discussion?

  @@unique([user1_id, user2_id])
  @@index([user1_id])
  @@index([user2_id])
  @@map("conversations")
}

model ConversationParticipant {
  id              BigInt       @id @default(autoincrement())
  conversation_id BigInt
  user_id         BigInt
  joined_at       DateTime     @default(now()) @db.Timestamptz(6)
  conversation    Conversation @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  user            User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  discussion      Discussion?  @relation(fields: [discussionId], references: [id])
  discussionId    String?

  @@unique([conversation_id, user_id])
  @@index([user_id])
  @@map("conversation_participants")
}

model MessageAttachment {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  message_id BigInt
  path       String
  type       String
  size       Int
  metadata   Json?
  message    Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@index([message_id])
  @@map("message_attachments")
}

model Message {
  id              BigInt              @id @default(autoincrement())
  conversation_id BigInt
  sender_id       BigInt
  text            String?
  created_at      DateTime            @default(now()) @db.Timestamptz(6)
  conversation    Conversation        @relation(fields: [conversation_id], references: [id], onDelete: Cascade)
  sender          User                @relation(fields: [sender_id], references: [id], onDelete: Cascade)
  notifications   Notification[]      @relation("NotificationMessage")
  attachments     MessageAttachment[]

  // moderation / lifecycle
  is_redacted Boolean   @default(false)
  edited_at   DateTime? @db.Timestamptz(6)
  deleted_at  DateTime? @db.Timestamptz(6)
  client_id   String?   @db.VarChar(64)

  // Drifts & Threads
  drift_id        BigInt? // FK column
  reply_to        BigInt?
  reply_count     Int              @default(0)
  last_reply_at   DateTime?
  anchoredDrift   Drift?           @relation("DriftAnchor")
  proposalSignals ProposalSignal[] @relation("MessageProposalSignals")

  // Misc
  meta Json?

  // relations

  reactions        MessageReaction[]
  SheafFacet       SheafFacet[]
  SheafMessageMeta SheafMessageMeta[]

  // 👇 exactly ONE relation field to Drift, named `drift` (or `Drift`, but only once)
  drift          Drift?           @relation("DriftMessages", fields: [drift_id], references: [id])
  MessageMention MessageMention[]

  // Stars & Bookmarks back-relations
  stars     MessageStar[]
  bookmarks Bookmark[]

  // --- GitChat receipts ---
  mergeReceipts MergeReceipt[]

  @@unique([conversation_id, client_id])
  @@index([conversation_id, created_at])
  @@index([drift_id])
  @@index([reply_to])
  @@map("messages")
}

enum DriftKind {
  DRIFT
  THREAD
  PROPOSAL
}

model Drift {
  id                BigInt    @id @default(autoincrement())
  conversation_id   BigInt
  created_by        BigInt
  title             String
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @updatedAt @db.Timestamptz(6)
  is_closed         Boolean   @default(false)
  is_archived       Boolean   @default(false)
  message_count     Int       @default(0)
  last_message_at   DateTime?
  anchor_message_id BigInt?   @unique
  kind              DriftKind @default(DRIFT)
  root_message_id   BigInt? // <— root message for kind=THREAD

  // relations
  conversation   Conversation @relation("ConversationDrifts", fields: [conversation_id], references: [id], onDelete: Cascade)
  anchor_message Message?     @relation("DriftAnchor", fields: [anchor_message_id], references: [id], onDelete: Cascade)

  // 👇 inverse side of the relation; MUST use the same name "DriftMessages"
  messages Message[] @relation("DriftMessages")

  members DriftMember[]

  @@unique([conversation_id, root_message_id, kind], map: "uniq_thread_per_root")
  @@index([root_message_id, kind]) // ✅ add this line here
  @@index([conversation_id])
  @@index([root_message_id])
  @@map("drifts")
}

model DriftMember {
  id           BigInt    @id @default(autoincrement())
  drift_id     BigInt
  user_id      BigInt
  joined_at    DateTime  @default(now()) @db.Timestamptz(6)
  collapsed    Boolean   @default(true)
  pinned       Boolean   @default(false)
  muted        Boolean   @default(false)
  last_read_at DateTime?

  drift Drift @relation(fields: [drift_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([drift_id, user_id])
  @@index([user_id])
  @@map("drift_members")
}

enum PollKind {
  OPTIONS
  TEMP
}

model Poll {
  id              BigInt    @id @default(autoincrement())
  conversation_id BigInt
  message_id      BigInt
  created_by_id   BigInt
  kind            PollKind
  options         String[]  @default([])
  max_options     Int       @default(1)
  closes_at       DateTime? @db.Timestamptz(6)
  anonymous       Boolean   @default(false)
  created_at      DateTime  @default(now()) @db.Timestamptz(6)

  votes PollVote[]

  @@index([conversation_id])
  @@map("polls")
}

model PollVote {
  id         BigInt   @id @default(autoincrement())
  poll_id    BigInt
  user_id    BigInt
  option_idx Int?
  value      Int?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  poll Poll @relation(fields: [poll_id], references: [id], onDelete: Cascade)

  @@unique([poll_id, user_id])
  @@map("poll_votes")
}

model CanonicalMedia {
  id            String         @id
  title         String
  mediaType     String
  metadata      Json?
  embedding     Float[]
  updatedAt     DateTime       @updatedAt
  favoriteItems FavoriteItem[]

  @@map("canonical_media")
}

model FavoriteItem {
  mediaId String
  rating  Int?
  addedAt DateTime       @default(now())
  userId  BigInt
  media   CanonicalMedia @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user    User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, mediaId])
  @@index([userId])
  @@map("favorite_items")
}

model Notification {
  id              BigInt            @id @default(autoincrement())
  user_id         BigInt
  actor_id        BigInt
  type            notification_type
  conversation_id BigInt?
  message_id      BigInt?
  market_id       String?
  trade_id        String?
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  read            Boolean           @default(false)
  actor           User              @relation("NotificationActor", fields: [actor_id], references: [id], onDelete: Cascade)
  conversation    Conversation?     @relation("NotificationConversation", fields: [conversation_id], references: [id], onDelete: Cascade)
  message         Message?          @relation("NotificationMessage", fields: [message_id], references: [id], onDelete: Cascade)
  market          PredictionMarket? @relation("PredictionMarketNotifications", fields: [market_id], references: [id])
  trade           Trade?            @relation("TradeNotifications", fields: [trade_id], references: [id])
  user            User              @relation("NotificationUser", fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("notifications")
}

/// --- Stars & Bookmarks ---
model MessageStar {
  user_id    BigInt
  message_id BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  message Message @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@id([user_id, message_id])
  @@index([user_id, created_at])
  @@map("message_stars")
}

model Bookmark {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  message_id BigInt
  label      String?
  created_at DateTime @default(now()) @db.Timestamptz(6)

  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  message Message @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@unique([user_id, message_id])
  @@index([user_id, created_at])
  @@map("bookmarks")
}

model PortfolioPage {
  id         BigInt   @id @default(autoincrement())
  slug       String   @unique
  html       String
  css        String
  tsx        String? // existing
  payload    Json? // <‑‑ NEW (optional)
  snapshot   String? // <‑‑ NEW (optional helper)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  owner_id   BigInt?
  owner      User?    @relation(fields: [owner_id], references: [id], onDelete: Cascade)

  @@index([owner_id, created_at])
  @@map("portfolio_pages")
}

// prisma/schema.prisma
model ProfileSite {
  id        BigInt   @id @default(autoincrement())
  slug      String   @unique
  ownerId   BigInt   @map("owner_id")
  title     String?
  caption   String?
  pageUrl   String   @map("page_url")
  snapshot  String?
  isPublic  Boolean  @default(true) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profile_sites")
}

model scroll_events {
  id         BigInt   @id @default(autoincrement())
  user_id    String   @db.Uuid
  content_id String?  @db.Uuid
  dwell_ms   Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  @@index([user_id], map: "scroll_events_user_idx")
}

model user_taste_vectors {
  user_id    BigInt                @id
  taste      Unsupported("vector")
  traits     Json?                 @default("{}")
  updated_at DateTime              @default(now()) @db.Timestamptz(6)

  @@index([taste], map: "user_taste_vectors_ann")
}

model track_embedding {
  vector    Unsupported("vector")
  createdAt DateTime              @default(now())
  track_id  String                @id

  @@map("track_embedding")
}

model UserSimilarityKnn {
  user_id      BigInt
  neighbour_id BigInt
  sim          Float
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  @@id([user_id, neighbour_id])
  @@map("user_similarity_knn")
}

model PredictionMarket {
  id         String          @id @default(cuid())
  postId     BigInt          @unique
  question   String          @db.VarChar(140)
  closesAt   DateTime
  closedAt   DateTime?
  resolvesAt DateTime?
  state      PredictionState @default(OPEN)
  outcome    MarketOutcome?
  b          Float           @default(100)
  yesPool    Float           @default(0)
  noPool     Float           @default(0)
  creatorId  BigInt
  oracleId   BigInt?

  trades         Trade[]
  notifications  Notification[]  @relation("PredictionMarketNotifications")
  post           FeedPost        @relation("FeedPostPrediction", fields: [postId], references: [id])
  creator        User            @relation("CreatedPredictionMarkets", fields: [creatorId], references: [id])
  oracle         User?           @relation("OraclePredictionMarkets", fields: [oracleId], references: [id])
  RealtimePost   RealtimePost[]
  resolutionLogs ResolutionLog[]

  @@map("prediction_markets")
}

model Trade {
  id        String        @id @default(cuid())
  marketId  String
  userId    BigInt
  side      MarketOutcome
  shares    Float
  price     Float
  cost      Int
  createdAt DateTime      @default(now()) @db.Timestamptz(6)

  market        PredictionMarket @relation(fields: [marketId], references: [id])
  user          User             @relation("UserTrades", fields: [userId], references: [id])
  notifications Notification[]   @relation("TradeNotifications")

  @@index([marketId])
  @@index([userId])
  @@index([marketId, userId], name: "idx_trade_market_user")
  @@map("prediction_trades")
}

model Wallet {
  userId       BigInt @id
  balanceCents Int    @default(0)
  lockedCents  Int    @default(0)

  user User @relation(fields: [userId], references: [id])

  @@map("wallet")
}

model ResolutionLog {
  id         BigInt            @id @default(autoincrement())
  market     PredictionMarket  @relation(fields: [marketId], references: [id])
  marketId   String
  resolver   User              @relation(fields: [resolverId], references: [id])
  resolverId BigInt
  outcome    ResolutionOutcome
  createdAt  DateTime          @default(now())

  @@map("resolution_log")
}

enum ResolutionOutcome {
  YES
  NO
  N_A
}

enum PredictionState {
  OPEN
  CLOSED
  RESOLVED
}

enum MarketOutcome {
  YES
  NO
}

enum like_type {
  LIKE
  DISLIKE
}

enum realtime_post_type {
  TEXT
  VIDEO
  IMAGE
  LIVESTREAM
  IMAGE_COMPUTE
  COLLAGE
  GALLERY
  PORTAL
  AUDIO
  DRAW
  LIVECHAT
  DOCUMENT
  THREAD
  CODE
  PORTFOLIO
  LLM_INSTRUCTION
  PREDICTION
  PLUGIN
  PRODUCT_REVIEW
  ENTROPY
  MUSIC
  ROOM_CANVAS
}

enum visibility {
  PUBLIC
  FOLLOWERS
  PRIVATE
}

enum notification_type {
  FOLLOW
  MESSAGE
  TRADE_EXECUTED
  MARKET_RESOLVED
}

model Section {
  id           BigInt   @id @default(autoincrement())
  x            Int
  y            Int
  visitors     Int      @default(0)
  liveCount    Int      @default(0)
  auctionCount Int      @default(0)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @updatedAt @db.Timestamptz(6)
  stalls       Stall[]

  @@unique([x, y])
  @@map("section") // 👈 tell Prisma the real table name
}

model Stall {
  id           BigInt         @id @default(autoincrement())
  section_id   BigInt?
  owner_id     BigInt
  name         String
  seller_id    BigInt?
  seller       Seller?        @relation(fields: [seller_id], references: [id])
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  section      Section?       @relation(fields: [section_id], references: [id])
  owner        User           @relation(fields: [owner_id], references: [id])
  items        Item[]
  auctions     Auction[]
  orders       Order[]
  images       StallImage[]
  StallMessage StallMessage[]
  live         Boolean        @default(false)
  liveSrc      String? // nullable -> no stream yet
  doc          Json?
  Offer        Offer[]

  @@unique([section_id, owner_id])
  @@index([section_id])
  @@index([owner_id, updated_at])
  @@map("stalls")
}

model StallImage {
  id         BigInt   @id @default(autoincrement())
  stall_id   BigInt
  url        String
  blurhash   String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  position   Int      @default(0)
  stall      Stall    @relation(fields: [stall_id], references: [id])

  @@index([stall_id, position])
  @@map("stall_image")
}

// ---------- ITEM ----------
model Item {
  id          BigInt   @id @default(autoincrement())
  stall_id    BigInt
  name        String
  description String
  price       Decimal? @db.Decimal(12, 2)
  currency    String   @default("usd")
  stock       Int
  images      String[] // PG array
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  stall      Stall       @relation(fields: [stall_id], references: [id])
  offers     Offer[]
  auction    Auction?
  orderItems OrderItem[]
  cartItems  CartItem[]
  OrderLine  OrderLine[]

  @@index([stall_id])
  @@map("items")
}

model Seller {
  id                   BigInt  @id @default(autoincrement()) // <-- give Seller the ids
  stripeAccountId      String? @unique
  stripeChargesEnabled Boolean @default(false)
  stalls               Stall[]
  Offer                Offer[]
}

// ---------- OFFER ----------
model Offer {
  id            BigInt      @id @default(autoincrement())
  stall_id      BigInt
  item_id       BigInt?
  buyer_id      BigInt
  seller_id     BigInt
  amount        Decimal     @db.Decimal(12, 2)
  currency      String      @default("usd")
  status        OfferStatus @default(PENDING)
  counter_of_id BigInt?
  expires_at    DateTime?
  version       Int         @default(1)
  message       String?
  created_at    DateTime    @default(now()) @db.Timestamptz(6)
  updated_at    DateTime    @default(now()) @updatedAt @db.Timestamptz(6)

  stall  Stall  @relation(fields: [stall_id], references: [id])
  item   Item?  @relation(fields: [item_id], references: [id])
  buyer  User   @relation(fields: [buyer_id], references: [id])
  seller Seller @relation(fields: [seller_id], references: [id])

  counterOf Offer?  @relation("OfferCounters", fields: [counter_of_id], references: [id])
  counters  Offer[] @relation("OfferCounters")

  // reservation for checkout
  cart       Cart?        @relation("CartOffer")
  OfferEvent OfferEvent[]

  @@index([stall_id, status])
  @@index([buyer_id, status])
  @@index([item_id, status])
  @@map("offers")
}

enum OfferEventKind {
  CREATED
  COUNTERED
  ACCEPTED
  REJECTED
  EXPIRED
}

model OfferEvent {
  id         BigInt         @id @default(autoincrement())
  offer_id   BigInt
  kind       OfferEventKind
  payload    Json?
  created_at DateTime       @default(now()) @db.Timestamptz(6)

  offer Offer @relation(fields: [offer_id], references: [id])

  @@index([offer_id])
  @@map("offer_events")
}

// ---------- AUCTION / BID ----------
model Auction {
  id         BigInt        @id @default(autoincrement())
  item_id    BigInt        @unique
  stall_id   BigInt
  reserve    Decimal       @db.Decimal(12, 2)
  currency   String        @default("usd")
  ends_at    DateTime
  state      auction_state @default(LIVE)
  winner_id  BigInt?
  created_at DateTime      @default(now()) @db.Timestamptz(6)

  item   Item    @relation(fields: [item_id], references: [id])
  stall  Stall   @relation(fields: [stall_id], references: [id])
  winner User?   @relation(fields: [winner_id], references: [id])
  bids   Bid[]
  Order  Order[]

  @@index([stall_id])
  @@index([ends_at, state])
  @@map("auctions")
}

model Bid {
  id         BigInt   @id @default(autoincrement())
  auction_id BigInt
  bidder_id  BigInt
  amount     Decimal  @db.Decimal(12, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  auction Auction @relation(fields: [auction_id], references: [id])
  bidder  User    @relation(fields: [bidder_id], references: [id])

  @@index([auction_id, created_at])
  @@map("bids")
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum OrderStatus {
  PENDING_PAYMENT
  AUTHORIZED
  PAID
  FULFILLED
  RELEASED
  DISPUTED
  REFUNDED
  CANCELLED
}

// ---------- ORDERS / CART / ESCROW ----------
model Order {
  id           BigInt      @id @default(autoincrement())
  stall_id     BigInt
  buyer_id     BigInt?
  auction_id   BigInt?
  status       OrderStatus @default(PENDING_PAYMENT)
  subtotal     Decimal?    @db.Decimal(12, 2)
  shipping     Decimal?    @db.Decimal(12, 2)
  total        Decimal?    @db.Decimal(12, 2)
  currency     String      @default("usd")
  stripePI     String?
  pmId         String?
  fulfilled_at DateTime?
  released_at  DateTime?
  hold_days    Int         @default(3)
  created_at   DateTime    @default(now()) @db.Timestamptz(6)
  updated_at   DateTime    @default(now()) @updatedAt @db.Timestamptz(6)

  stall   Stall    @relation(fields: [stall_id], references: [id])
  buyer   User?    @relation(fields: [buyer_id], references: [id])
  auction Auction? @relation(fields: [auction_id], references: [id])

  items     OrderItem[]
  OrderLine OrderLine[]

  @@index([stall_id, status])
  @@map("orders")
}

model OrderItem {
  id         BigInt   @id @default(autoincrement())
  order_id   BigInt
  item_id    BigInt
  qty        Int
  unit_price Decimal? @db.Decimal(12, 2) // TEMP: nullable if you just added it
  created_at DateTime @default(now()) @db.Timestamptz(6)

  order Order @relation(fields: [order_id], references: [id])
  item  Item  @relation(fields: [item_id], references: [id])

  @@index([order_id])
  @@map("order_items")
}

model OrderLine {
  id          BigInt   @id @default(autoincrement())
  order_id    BigInt?
  item_id     BigInt?
  quantity    Int?
  price_cents Int?
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  order       Order?   @relation(fields: [order_id], references: [id])
  item        Item?    @relation(fields: [item_id], references: [id])

  @@index([order_id])
  @@map("order_lines")
}

model StallMessage {
  id         BigInt   @id @default(autoincrement())
  stall_id   BigInt
  user_id    BigInt
  text       String
  created_at DateTime @default(now()) @db.Timestamptz(6)

  stall Stall @relation(fields: [stall_id], references: [id])
  user  User  @relation(fields: [user_id], references: [id])

  @@index([stall_id])
  @@map("stall_messages")
}

model CartItem {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  item_id    BigInt
  qty        Int      @default(1)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id])
  item Item @relation(fields: [item_id], references: [id])

  @@unique([user_id, item_id])
  @@map("cart_items")
}

enum escrow_state {
  PENDING
  HELD
  RELEASED
  REFUNDED
}

// Offer reservation (one-per-offer)
model Cart {
  id         BigInt   @id @default(autoincrement())
  user_id    BigInt
  offer_id   BigInt   @unique
  deadline   DateTime @db.Timestamptz(6)
  created_at DateTime @default(now()) @db.Timestamptz(6)

  offer  Offer   @relation("CartOffer", fields: [offer_id], references: [id])
  user   User    @relation(fields: [user_id], references: [id])
  escrow Escrow? @relation("CartEscrow")

  @@index([user_id])
  @@map("cart")
}

model Escrow {
  id         BigInt       @id @default(autoincrement())
  cart_id    BigInt       @unique
  state      escrow_state @default(PENDING)
  tx_ref     String?
  created_at DateTime     @default(now()) @db.Timestamptz(6)
  updated_at DateTime     @default(now()) @updatedAt @db.Timestamptz(6)

  cart Cart @relation("CartEscrow", fields: [cart_id], references: [id])

  @@map("escrow")
}

model PartyPresence {
  id         String   @id @default(cuid())
  party_id   String
  user_id    BigInt
  x          Int
  y          Int
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([party_id])
  @@map("party_presence")
}

model StallHeat {
  id       BigInt @id @default(autoincrement())
  stall_id BigInt
  cell     Int
  views    Int

  @@unique([stall_id, cell], name: "stall_id_cell")
  @@map("stall_heat")
}

model GroupMeeting {
  id              String   @id @default(uuid())
  title           String?
  participantUids String[]
  origins         Json?
  votes           Json?
  status          String   @default("init")
  createdAt       DateTime @default(now())

  @@map("group_meetings")
}

model UserSettings {
  user_id    BigInt   @id
  prefs      Json     @default("{}")
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model WorkspaceSettings {
  workspace_id BigInt   @id
  prefs        Json     @default("{}")
  updated_at   DateTime @updatedAt

  @@map("workspace_settings")
}

model Telemetry {
  id        BigInt   @id @default(autoincrement())
  event     String
  coords    String
  userId    BigInt?
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@index([event, createdAt])
}

enum auction_state {
  LIVE
  CLOSED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model LibraryPost {
  id          String   @id @default(cuid())
  uploader_id BigInt
  stack_id    String?
  title       String?
  page_count  Int
  file_url    String
  thumb_urls  String[]
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  annotations Annotation[]
  stack       Stack?       @relation(fields: [stack_id], references: [id])
  uploader    User         @relation(fields: [uploader_id], references: [id], onDelete: Cascade)
  feedPosts   FeedPost[]

  @@index([uploader_id, created_at])
  @@index([stack_id])
  @@map("library_posts")
}

model Stack {
  id             String              @id @default(cuid())
  owner_id       BigInt
  name           String
  description    String?
  is_public      Boolean             @default(false)
  order          String[]
  created_at     DateTime            @default(now()) @db.Timestamptz(6)
  parent_id      String?
  slug           String?             @unique
  owner          User                @relation(fields: [owner_id], references: [id], onDelete: Cascade)
  posts          LibraryPost[]
  parent         Stack?              @relation("StackHierarchy", fields: [parent_id], references: [id])
  children       Stack[]             @relation("StackHierarchy")
  feedPosts      FeedPost[]
  collaborators  StackCollaborator[]
  subscribers    StackSubscription[]
  StackReference StackReference[]

  @@unique([owner_id, name])
  @@map("stacks")
}

enum StackRole {
  OWNER
  EDITOR
  VIEWER
}

model StackCollaborator {
  stack_id   String
  user_id    BigInt
  role       StackRole @default(EDITOR)
  created_at DateTime  @default(now()) @db.Timestamptz(6)

  stack Stack @relation(fields: [stack_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([stack_id, user_id])
  @@index([user_id])
  @@index([stack_id])
  @@map("stack_collaborators")
}

model StackSubscription {
  stack_id   String
  user_id    BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)

  stack Stack @relation(fields: [stack_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([stack_id, user_id])
  @@index([user_id])
  @@index([stack_id])
  @@map("stack_subscriptions")
}

model Source {
  id            String    @id @default(cuid())
  kind          String // 'article' | 'book' | 'web' | 'dataset' | 'video' | 'other'
  title         String?
  authorsJson   Json? // [{family, given}] CSL-esque
  year          Int?
  container     String? // journal / site / channel
  publisher     String?
  volume        String?
  issue         String?
  pages         String?
  doi           String?   @unique
  url           String?   @unique
  platform      String? // 'arxiv' | 'substack' | 'twitter' | 'youtube' | ...
  accessedAt    DateTime?
  archiveUrl    String? // Wayback/perma.cc if available
  zoteroKey     String? // optional cross-ref key
  libraryPostId String? // link to your LibraryPost (Stack) row
  fingerprint   String? // sha1 of canonicalized url/doi/title to dedup
  createdById   String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  citations Citation[]
}

model Citation {
  id          String   @id @default(cuid())
  targetType  String // 'argument' | 'claim' | 'card' | 'comment' | 'move'
  targetId    String
  sourceId    String
  locator     String? // 'p. 13', 'fig. 2', timestamp '08:14', etc.
  quote       String? // short excerpt (<= 280 chars)
  note        String? // optional note / why relevant
  relevance   Int? // 1..5 quick signal
  createdById String
  createdAt   DateTime @default(now())

  source Source @relation(fields: [sourceId], references: [id])

  @@unique([targetType, targetId, sourceId, locator]) // prevents dup cites
}

model Annotation {
  id         String   @id @default(cuid())
  post_id    String
  page       Int
  rect       Json
  text       String
  author_id  BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)

  post   LibraryPost @relation(fields: [post_id], references: [id], onDelete: Cascade)
  author User        @relation(fields: [author_id], references: [id])

  @@index([post_id])
  @@map("annotations")
}

model CommentThread {
  id        String    @id @default(cuid())
  articleId String
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  anchor    Json // { startPath, startOffset, endPath, endOffset }
  resolved  Boolean   @default(false)
  createdBy String
  createdAt DateTime  @default(now())
  comments  Comment[]

  @@index([articleId])
}

model Comment {
  id        String        @id @default(cuid())
  threadId  String
  thread    CommentThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  body      String
  createdBy String
  createdAt DateTime      @default(now())
  upvotes   Int           @default(0)
  downvotes Int           @default(0)

  @@index([threadId])
}

model Article {
  id           String        @id @default(uuid())
  authorId     String
  title        String
  slug         String        @unique
  heroImageKey String?
  template     String        @default("standard")
  astJson      Json
  status       ArticleStatus @default(DRAFT)
  revisions    Revision[]
  analytics    Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  excerpt      String?
  readingTime  Int? // minutes
  publishedAt  DateTime? // set on publish

  allowAnnotations Boolean         @default(true)
  revisionId       String?
  threads          CommentThread[]
  deletedAt        DateTime?

  @@index([authorId, deletedAt, updatedAt])
  @@index([authorId, status, updatedAt])
  @@map("articles")
}

model Revision {
  id        String   @id @default(uuid())
  articleId String
  astJson   Json
  createdAt DateTime @default(now())

  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_revisions")
}

/// ---------- SHEAF (facets layered on existing Message) ----------
model SheafFacet {
  id        BigInt  @id @default(autoincrement())
  messageId BigInt
  message   Message @relation(fields: [messageId], references: [id])

  audienceKind      AudienceKind
  audienceMode      AudienceMode
  audienceRole      String?
  audienceListId    String?
  snapshotMemberIds String[]
  listVersionAtSend Int?
  audienceUserIds   String[]

  sharePolicy SharePolicy
  expiresAt   DateTime?
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt

  body Json

  priorityRank  Int     @default(0)
  visibilityKey String?

  // ✅ opposite side of the relation:
  attachments      SheafAttachment[]
  SheafMessageMeta SheafMessageMeta[]

  reactions      MessageReaction[]
  MessageMention MessageMention[]
  LinkPreview    LinkPreview[]

  @@index([messageId])
  @@index([audienceKind, audienceMode])
  @@index([audienceRole])
  @@index([audienceListId])
  @@index([priorityRank, createdAt])
  @@map("sheaf_facets")
}

model SheafMessageMeta {
  // 1:1 with Message; keeps default facet without touching your Message shape
  messageId      BigInt      @id
  message        Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  defaultFacetId BigInt?
  defaultFacet   SheafFacet? @relation(fields: [defaultFacetId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@map("sheaf_message_meta")
}

model SheafAudienceList {
  id        String   @id @default(cuid())
  ownerId   BigInt
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name      String
  memberIds String[] // Postgres text[]
  version   Int      @default(1)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([ownerId])
  @@map("sheaf_audience_lists")
}

model SheafBlob {
  id        String   @id @default(cuid())
  sha256    String   @unique
  mime      String
  size      Int
  path      String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  attachments SheafAttachment[]

  @@map("sheaf_blobs")
}

model SheafAttachment {
  id        BigInt   @id @default(autoincrement())
  facetId   BigInt
  blobId    String
  name      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  facet SheafFacet @relation(fields: [facetId], references: [id], onDelete: Cascade)
  blob  SheafBlob  @relation(fields: [blobId], references: [id])

  @@index([facetId])
  @@index([blobId])
  @@map("sheaf_attachments")
}

enum SharePolicy {
  ALLOW
  REDACT
  FORBID
}

enum AudienceKind {
  EVERYONE
  ROLE
  LIST
  USERS
}

enum AudienceMode {
  DYNAMIC
  SNAPSHOT
}

model UserRole {
  userId    BigInt
  role      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, role])
  @@index([role])
  @@map("user_roles")
}

model MessageReaction {
  id        BigInt  @id @default(autoincrement())
  messageId BigInt
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  /// Optional: the facet the viewer reacted to (safe to store; we filter on read)
  facetId BigInt?
  facet   SheafFacet? @relation(fields: [facetId], references: [id], onDelete: Cascade)

  userId BigInt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  emoji     String
  createdAt DateTime @default(now())

  @@unique([messageId, facetId, userId, emoji], map: "uniq_reaction_per_facet")
  @@index([messageId])
  @@index([userId])
}

// --- Mentions ---
model MessageMention {
  id        BigInt   @id @default(autoincrement())
  messageId BigInt
  facetId   BigInt? // mention occurred in this facet body (optional for plain)
  userId    BigInt
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  message Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  facet   SheafFacet? @relation(fields: [facetId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([messageId])
  @@index([facetId])
  @@map("message_mentions")
}

// --- Link preview cache (server-fetched, SSRF-safe) ---
model LinkPreview {
  urlHash   String   @id
  url       String
  title     String?
  desc      String?
  image     String?
  fetchedAt DateTime @default(now()) @db.Timestamptz(6)
  status    String // "ok" | "blocked" | "noindex" | "error"
  facetId   BigInt?

  facet SheafFacet? @relation(fields: [facetId], references: [id], onDelete: SetNull)

  @@index([facetId])
  @@index([fetchedAt])
  @@map("link_previews")
}

model ConversationState {
  conversationId BigInt
  userId         BigInt
  lastReadAt     DateTime @default(now()) @db.Timestamptz(6)

  @@id([conversationId, userId])
  @@index([userId])
  @@map("conversation_state")
}

model ActivityPubKey {
  user_id     BigInt   @id
  public_pem  String   @db.Text
  private_pem String   @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("activitypub_keys")
}

// --- ActivityPub federation state ---
enum ApFollowState {
  PENDING
  ACCEPTED
  REJECTED
}

model ApRemoteActor {
  id                BigInt    @id @default(autoincrement())
  url               String    @unique // canonical actor IRI
  inbox             String?
  sharedInbox       String?
  preferredUsername String?
  domain            String?
  publicKeyPem      String?   @db.Text
  lastSeen          DateTime? @db.Timestamptz(6)
  blocked           Boolean   @default(false)

  followers ApFollower[]
  following ApFollowing[]

  @@map("ap_remote_actors")
}

model ApFollower {
  id              BigInt        @id @default(autoincrement())
  user_id         BigInt
  remote_actor_id BigInt
  state           ApFollowState @default(ACCEPTED)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  accepted_at     DateTime?     @db.Timestamptz(6)

  user   User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  remote ApRemoteActor @relation(fields: [remote_actor_id], references: [id], onDelete: Cascade)

  @@unique([user_id, remote_actor_id])
  @@index([user_id])
  @@map("ap_followers")
}

model ApFollowing {
  id              BigInt        @id @default(autoincrement())
  user_id         BigInt
  remote_actor_id BigInt
  state           ApFollowState @default(PENDING)
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  accepted_at     DateTime?     @db.Timestamptz(6)

  user   User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  remote ApRemoteActor @relation(fields: [remote_actor_id], references: [id], onDelete: Cascade)

  @@unique([user_id, remote_actor_id])
  @@index([user_id])
  @@map("ap_following")
}

model ApOutboxActivity {
  id            BigInt   @id @default(autoincrement())
  actor_user_id BigInt
  activity_json Json
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [actor_user_id], references: [id], onDelete: Cascade)

  @@index([actor_user_id, created_at])
  @@map("ap_outbox")
}

enum ApDomainRuleMode {
  ALLOW
  DENY
}

model ApDomainRule {
  id         BigInt           @id @default(autoincrement())
  domain     String           @unique
  mode       ApDomainRuleMode
  created_at DateTime         @default(now()) @db.Timestamptz(6)

  @@map("ap_domain_rules")
}

model Room {
  id               String   @id @default(cuid())
  kind             RoomKind
  conversation_id  BigInt?
  realtime_room_id String?

  isSharded   Boolean @default(false)
  shardUrl    String?
  mediaBucket String?
  kmsKeyArn   String?

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@unique([conversation_id], map: "uniq_room_conversation")
  @@unique([realtime_room_id], map: "uniq_room_realtime")
  @@index([isSharded])
}

enum RoomKind {
  CONVERSATION
  REALTIME
}

model BlockManifest {
  id         String   @id // nanoid
  ownerId    BigInt   @map("owner_id")
  component  String
  props      Json
  originSlug String?  @map("origin_slug")
  originElId String?  @map("origin_el_id")
  forkOfId   String?  @map("fork_of_id")
  isPublic   Boolean  @default(true) @map("is_public")
  thumbnail  String?  @map("thumbnail") // 👈 NEW
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([ownerId, createdAt])
  @@map("block_manifests")
}

model PageComment {
  id        BigInt   @id @default(autoincrement())
  pageSlug  String
  elementId String
  authorId  BigInt
  text      String
  xPct      Float
  yPct      Float
  createdAt DateTime @default(now())
}

model PagePatch {
  id        BigInt   @id @default(autoincrement())
  pageSlug  String
  elementId String
  authorId  BigInt
  patch     Json // Partial<ElementRecord>
  status    String // "proposed" | "accepted" | "rejected"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Site {
  id        BigInt   @id @default(autoincrement())
  ownerId   BigInt
  slug      String   @unique
  theme     Json?
  createdAt DateTime @default(now())
}

model SitePage {
  id        BigInt   @id @default(autoincrement())
  siteId    BigInt
  slug      String // "home", "work", …
  payload   Json // CanvasState-like
  order     Int // nav order
  createdAt DateTime @default(now())

  @@unique([siteId, slug])
  @@index([siteId, order])
}

// ----------------------------------------------------------
// GitChat: Merge receipts (append-only audit of version merges)
// ----------------------------------------------------------
model MergeReceipt {
  id                BigInt   @id @default(autoincrement())
  message_id        BigInt
  version_hash      String   @db.VarChar(128)
  merged_at         DateTime @default(now()) @db.Timestamptz(6)
  parents           Json?
  approvals         Json?
  blocks            Json?
  policy_id         String?  @db.VarChar(64)
  prev_receipt_hash String?  @db.VarChar(128)
  snapshot          Json?
  signature         String?  @db.VarChar(512)

  merged_by BigInt
  // ⬇️ name the relation so we can specify the opposite on User
  mergedBy  User   @relation("UserMergedReceipts", fields: [merged_by], references: [id], onDelete: Cascade)

  message Message @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@index([message_id, merged_at])
  @@index([version_hash])
  @@map("merge_receipts")
}

// ----------------------------------------------------------
// GitChat: Proposal signals (Approve/Block per proposal facet)
// ----------------------------------------------------------
enum ProposalSignalKind {
  APPROVE
  BLOCK
}

model ProposalSignal {
  id              BigInt             @id @default(autoincrement())
  conversation_id BigInt
  message_id      BigInt
  facet_id        String             @db.VarChar(64)
  user_id         BigInt
  kind            ProposalSignalKind
  created_at      DateTime           @default(now()) @db.Timestamptz(6)

  // ⬇️ name each relation
  message      Message      @relation("MessageProposalSignals", fields: [message_id], references: [id], onDelete: Cascade)
  user         User         @relation("UserProposalSignals", fields: [user_id], references: [id], onDelete: Cascade)
  conversation Conversation @relation("ConversationProposalSignals", fields: [conversation_id], references: [id], onDelete: Cascade)

  @@unique([facet_id, user_id])
  @@index([message_id])
  @@index([conversation_id])
  @@map("proposal_signals")
}

model AgreementLock {
  id         BigInt   @id @default(autoincrement())
  message_id BigInt   @unique
  locked_by  BigInt
  locked_at  DateTime @default(now()) @db.Timestamptz(6)

  @@map("agreement_locks")
}

model AgreementAck {
  message_id BigInt
  user_id    BigInt
  ack_at     DateTime @default(now()) @db.Timestamptz(6)

  @@id([message_id, user_id])
  @@map("agreement_acks")
}

//Deliberation models and enums

// Proposition model
model Proposition {
  id             String            @id @default(cuid())
  deliberationId String
  authorId       String
  text           String
  mediaType      String            @default("text")
  mediaUrl       String?
  status         PropositionStatus @default(PUBLISHED)

  // Keep the FK here and make it one-to-one:
  promotedClaimId String? @unique
  promotedClaim   Claim?  @relation("PropositionClaim", fields: [promotedClaimId], references: [id], onDelete: SetNull)

  promotedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // workshop counters etc…
  voteUpCount   Int @default(0)
  voteDownCount Int @default(0)
  endorseCount  Int @default(0)
  replyCount    Int @default(0)

  votes        PropositionVote[]
  endorsements PropositionEndorsement[]
  replies      PropositionReply[]
  tags         PropositionTag[]

  // optional helper for idempotent migration
  legacyArgumentId String? @unique

  @@index([deliberationId, createdAt])
}

enum PropositionStatus {
  DRAFT
  PUBLISHED
  CLAIMED
  ARCHIVED
}

model PropositionVote {
  id            String      @id @default(cuid())
  propositionId String
  userId        String
  value         Int
  createdAt     DateTime    @default(now())
  proposition   Proposition @relation(fields: [propositionId], references: [id], onDelete: Cascade)

  @@unique([propositionId, userId], name: "propositionId_userId")
}

model PropositionEndorsement {
  id            String      @id @default(cuid())
  propositionId String
  userId        String
  createdAt     DateTime    @default(now())
  proposition   Proposition @relation(fields: [propositionId], references: [id], onDelete: Cascade)

  @@unique([propositionId, userId], name: "propositionId_userId")
}

model PropositionReply {
  id            String      @id @default(cuid())
  propositionId String
  authorId      String
  text          String
  createdAt     DateTime    @default(now())
  proposition   Proposition @relation(fields: [propositionId], references: [id], onDelete: Cascade)

  @@index([propositionId, createdAt])
}

model PropositionTag {
  id            String      @id @default(cuid())
  propositionId String
  key           String // e.g. "topic:education"
  createdAt     DateTime    @default(now())
  proposition   Proposition @relation(fields: [propositionId], references: [id], onDelete: Cascade)

  @@index([propositionId, key])
}

model Argument {
  id             String  @id @default(cuid())
  deliberationId String
  authorId       String
  text           String  @db.Text
  sources        Json?
  confidence     Float?
  isImplicit     Boolean @default(false)

  schemeId          String?           @db.VarChar(64)
  scheme            ArgumentScheme?   @relation(fields: [schemeId], references: [id])
  conclusionClaimId String?
  conclusion        Claim?            @relation("Conclusion", fields: [conclusionClaimId], references: [id])
  premises          ArgumentPremise[]
  implicitWarrant   Json? // optional enthymeme/warrant text or rule

  // NEW P1b metadata
  quantifier String?
  modality   String?
  mediaType  MediaType @default(text)
  mediaUrl   String?
  createdAt  DateTime  @default(now())

  claimId String?
  claim   Claim?  @relation("ArgumentClaim", fields: [claimId], references: [id])

  deliberation      Deliberation        @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  outgoingEdges     ArgumentEdge[]      @relation("fromArg")
  incomingEdges     ArgumentEdge[]      @relation("toArg")
  approvals         ArgumentApproval[]
  ViewpointArgument ViewpointArgument[]
  IssueLink         IssueLink[]

  // ✅ back-relations for ArgumentImport (argument side)
  argImportsSource ArgumentImport[] @relation("ArgImpFromArg")
  argImportsTarget ArgumentImport[] @relation("ArgImpToArg")

  debateNodes DebateNode[] @relation(name: "ArgumentDebateNodes")

  @@index([deliberationId])
  @@index([deliberationId, createdAt])
  @@index([deliberationId, claimId, createdAt])
}

enum ArgumentAttackSubtype {
  SUPPORT_ATTACK
  CONSEQUENCE_ATTACK
  JUSTIFICATION_ATTACK
  UNDERMINE
  REBUT
  UNDERCUT
  OVERCUT
}

model ArgumentPremise {
  argumentId String
  claimId    String
  isImplicit Boolean  @default(false)
  argument   Argument @relation(fields: [argumentId], references: [id], onDelete: Cascade)
  groupKey   String?
  claim      Claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)

  // PK
  @@id([argumentId, claimId])
}

model ArgumentEdge {
  id             String                 @id @default(cuid())
  deliberationId String
  fromArgumentId String
  toArgumentId   String
  type           EdgeType
  attackSubtype  ArgumentAttackSubtype? // NEW

  createdById String
  createdAt   DateTime @default(now())

  targetScope       TargetScope @default(conclusion)
  targetInferenceId String? // NEW: specific inference inside toArgument
  inferenceId       String?

  cqKey           String? // optional Critical Question key
  targetPremiseId String? // target premise Claim (for undermines)
  targetClaimId   String? // target Claim (for rebuttals)
  attackType      AttackType?

  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  from         Argument     @relation("fromArg", fields: [fromArgumentId], references: [id], onDelete: Cascade)
  to           Argument     @relation("toArg", fields: [toArgumentId], references: [id], onDelete: Cascade)

  @@index([deliberationId])
  @@index([fromArgumentId])
  @@index([toArgumentId])
}

// --- lib/models/schema.prisma (additions) ---

model ConflictScheme {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())

  // Optional: pre-map to a legacy "attackType"/"targetScope" for AF compatibility
  legacyAttackType  String? // 'REBUTS' | 'UNDERCUTS' | 'UNDERMINES'
  legacyTargetScope String? // 'conclusion' | 'inference' | 'premise'

  applications ConflictApplication[]
}

model ConflictApplication {
  id             String   @id @default(cuid())
  deliberationId String
  schemeId       String? // nullable: ad-hoc conflicts still allowed
  createdById    String
  createdAt      DateTime @default(now())

  // Conflicting element: exactly one of these must be non-null
  conflictingClaimId    String?
  conflictingArgumentId String?

  // Conflicted element: exactly one of these must be non-null
  conflictedClaimId    String?
  conflictedArgumentId String?

  // Optional: keep legacy AF view in sync
  legacyAttackType  String? // 'REBUTS'|'UNDERCUTS'|'UNDERMINES'
  legacyTargetScope String? // 'conclusion'|'inference'|'premise'

  // Metadata: track which CQ this attack addresses, source, etc.
  metaJson Json? @default("{}")

  scheme ConflictScheme? @relation(fields: [schemeId], references: [id], onDelete: SetNull)

  @@index([deliberationId])
  @@index([conflictingClaimId])
  @@index([conflictingArgumentId])
  @@index([conflictedClaimId])
  @@index([conflictedArgumentId])
}

model PreferenceScheme {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  description String?  @db.Text
  // optional: scope info (preferences between information, between RAs, or between schemes)
  scope       String? // 'info' | 'inference' | 'scheme' | 'mixed'
  createdAt   DateTime @default(now())

  applications PreferenceApplication[]
}

model PreferenceApplication {
  id             String   @id @default(cuid())
  deliberationId String
  schemeId       String? // nullable
  createdById    String
  createdAt      DateTime @default(now())

  // Preferred element (exactly one of these)
  preferredClaimId    String?
  preferredArgumentId String?
  preferredSchemeId   String? // when preferring an inference scheme

  // Dispreferred element (exactly one of these)
  dispreferredClaimId    String?
  dispreferredArgumentId String?
  dispreferredSchemeId   String?

  scheme PreferenceScheme? @relation(fields: [schemeId], references: [id], onDelete: SetNull)

  @@index([deliberationId])
  @@index([preferredClaimId])
  @@index([preferredArgumentId])
  @@index([dispreferredClaimId])
  @@index([dispreferredArgumentId])
}

model DefaultRule {
  id             String   @id @default(cuid())
  deliberationId String
  argumentId     String
  role           String // 'premise' | 'claim'
  antecedent     String // α
  justification  String // β
  consequent     String // γ
  createdBy      String
  createdAt      DateTime @default(now())
}

model ArgumentApproval {
  id             String   @id @default(cuid())
  deliberationId String
  argumentId     String
  userId         String
  createdAt      DateTime @default(now())

  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  argument     Argument     @relation(fields: [argumentId], references: [id], onDelete: Cascade)

  @@unique([argumentId, userId])
  @@index([deliberationId, userId])
  @@index([deliberationId, argumentId], name: "argapproval_delib_argument") // NEW
}

model ViewpointSelection {
  id             String             @id @default(cuid())
  deliberationId String
  rule           RepresentationRule
  k              Int
  coverageAvg    Float
  coverageMin    Float
  jrSatisfied    Boolean            @default(false)
  explainJson    Json
  createdById    String
  createdAt      DateTime           @default(now())

  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  amplificationEvents AmplificationEvent[] @relation("SelectionEvents")

  viewpointArgs ViewpointArgument[]

  @@index([deliberationId, rule, k, createdAt], name: "vp_sel_delib_rule_k_createdAt") // NEW
  @@index([deliberationId, createdAt])
}

model ViewpointArgument {
  selectionId String
  argumentId  String
  viewpoint   Int // 0..k-1 index

  selection ViewpointSelection @relation(fields: [selectionId], references: [id], onDelete: Cascade)
  argument  Argument           @relation(fields: [argumentId], references: [id], onDelete: Cascade)

  @@id([selectionId, argumentId])
  @@index([viewpoint])
  @@index([selectionId, viewpoint, argumentId], name: "vp_arg_selection_viewpoint_argument") // NEW
}

// --------- Clusters (basic) ----------
enum ClusterType {
  topic
  affinity
}

model Cluster {
  id             String   @id @default(cuid())
  deliberationId String
  type           String // 'affinity' | 'topic' (keep string for flexibility)
  label          String?
  createdAt      DateTime @default(now())

  deliberation            Deliberation      @relation(fields: [deliberationId], references: [id], onDelete: Cascade)
  users                   UserCluster[]
  arguments               ArgumentCluster[]
  bridgeRequestsTargeting BridgeRequest[]   @relation("BridgeTargetCluster")

  @@index([deliberationId, type, createdAt])
  @@index([deliberationId, type])
  @@index([deliberationId, createdAt])
}

model UserCluster {
  id        String @id @default(cuid())
  clusterId String
  userId    String
  score     Float  @default(0)

  cluster Cluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)

  @@index([clusterId])
  @@index([userId])
}

model ArgumentCluster {
  id         String @id @default(cuid())
  clusterId  String
  argumentId String
  score      Float  @default(0)

  cluster Cluster @relation(fields: [clusterId], references: [id], onDelete: Cascade)

  // argumentId refers to your existing Argument model
  @@index([clusterId, argumentId])
  @@index([clusterId])
  @@index([argumentId])
}

// --------- Bridge Builder ----------
enum BridgeRequestStatus {
  open
  assigned
  completed
  expired
}

model BridgeRequest {
  id              String              @id @default(cuid())
  deliberationId  String
  requestedById   String
  targetClusterId String
  targetCluster   Cluster             @relation("BridgeTargetCluster", fields: [targetClusterId], references: [id], onDelete: Cascade)
  status          BridgeRequestStatus @default(open)
  expiresAt       DateTime?
  createdAt       DateTime            @default(now())

  assignments BridgeAssignment[]
}

model BridgeAssignment {
  id            String            @id @default(cuid())
  requestId     String
  assigneeId    String
  assignedAt    DateTime          @default(now())
  acceptedAt    DateTime?
  completedAt   DateTime?
  summaryCardId String?
  summaryCard   DeliberationCard? @relation("BridgeSummaryCard", fields: [summaryCardId], references: [id], onDelete: SetNull)
  rewardCare    Int               @default(0)

  request BridgeRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model AmplificationEvent {
  id             String             @id @default(cuid())
  deliberationId String? // 👈 make optional for now
  hostType       ContentTargetType?
  hostId         String?
  eventType      String? // 👈 make optional for now
  reason         String?
  payload        Json?
  createdById    String?
  createdAt      DateTime           @default(now())

  viewpointSelectionId String?
  viewpointSelection   ViewpointSelection? @relation("SelectionEvents", fields: [viewpointSelectionId], references: [id])
}

model SchemeVariant {
  id       String         @id @default(cuid())
  schemeId String
  key      String // e.g., 'pos_conseq' | 'neg_conseq'
  name     String
  notes    String?
  scheme   ArgumentScheme @relation(fields: [schemeId], references: [id], onDelete: Cascade)
}

// --------- Briefs ----------
enum BriefStatus {
  draft
  published
}

enum Visibility {
  public
  unlisted
  room_only
}

model Brief {
  id               String      @id @default(cuid())
  roomId           String
  title            String
  slug             String      @unique
  status           BriefStatus @default(draft)
  visibility       Visibility  @default(public)
  createdById      String
  currentVersionId String?     @unique // 👈 must be unique
  createdAt        DateTime    @default(now())

  // Relation 1: one-to-one
  currentVersion BriefVersion? @relation("BriefCurrentVersion", fields: [currentVersionId], references: [id])

  // Relation 2: one-to-many
  versions BriefVersion[] @relation("BriefVersions")
}

model BriefVersion {
  id                         String   @id @default(cuid())
  briefId                    String
  number                     Int
  compiledFromDeliberationId String?
  sectionsJson               Json
  citations                  Json
  createdById                String
  createdAt                  DateTime @default(now())

  // Relation 1 (opposite of Brief.currentVersion)
  briefAsCurrent Brief? @relation("BriefCurrentVersion")

  // Relation 2 (opposite of Brief.versions)
  brief Brief @relation("BriefVersions", fields: [briefId], references: [id], onDelete: Cascade)

  links BriefLink[] @relation("BriefVersionLinks")

  @@unique([briefId, number])
}

enum BriefSourceType {
  card
  argument
  post
  claim
}

model BriefLink {
  id             String          @id @default(cuid())
  briefVersionId String
  sourceType     BriefSourceType
  sourceId       String

  version BriefVersion @relation("BriefVersionLinks", fields: [briefVersionId], references: [id], onDelete: Cascade)
}

enum IssueState {
  open
  pending
  closed
}

enum IssueLinkTargetType {
  argument
  claim
  card
  inference
}

enum IssueLinkRole {
  related
  blocks
  depends_on
  warrant
  evidence
}

enum IssueKind {
  general
  cq
  moderation
  evidence
  structural
  governance
}

model Issue {
  id             String     @id @default(cuid())
  deliberationId String
  label          String
  description    String?
  state          IssueState @default(open)
  createdById    BigInt // <-- FIXED: Was String
  closedById     String?
  closedAt       DateTime?
  kind           IssueKind  @default(general)
  key            String?
  assigneeId     BigInt? // <-- FIXED: Was String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // --- Relations ---
  deliberation Deliberation @relation(fields: [deliberationId], references: [id])
  createdBy    User         @relation("CreatedIssues", fields: [createdById], references: [id])
  assignee     User?        @relation("AssignedIssues", fields: [assigneeId], references: [id])
  links        IssueLink[]

  @@index([deliberationId])
  @@index([deliberationId, state])
  @@index([kind, key], map: "issues_kind_key_idx")
}

model IssueLink {
  id             String              @id @default(cuid())
  issueId        String
  targetType     IssueLinkTargetType // NEW
  targetId       String // NEW
  // Back-compat (nullable): keep while migrating
  argumentId     String?
  claimId        String?
  deliberationId String?
  role           IssueLinkRole? // tighten if you like (else String)
  createdAt      DateTime            @default(now())

  issue        Issue         @relation(fields: [issueId], references: [id], onDelete: Cascade)
  Argument     Argument?     @relation(fields: [argumentId], references: [id])
  Claim        Claim?        @relation(fields: [claimId], references: [id])
  Deliberation Deliberation? @relation(fields: [deliberationId], references: [id])

  @@unique([issueId, targetType, targetId])
  @@index([targetType, targetId])
  @@index([claimId]) // supports current counts route
}

// ---------- Enums ----------
enum ModerationStatus {
  OK
  NEEDS_SOURCES
  WORKSHOP
  OFF_TOPIC_REDIRECT
  DUPLICATE_MERGE
  DISPUTED
  OUT_OF_BOUNDS
}

enum ContentTargetType {
  article
  post
  room_thread
  deliberation
  argument
  card
  claim
  brief
  brief_version
}

enum PanelistRole {
  member
  chair
  observer
}

enum PanelDecisionType {
  APPROVE
  WORKSHOP
  REDIRECT
}

enum LogEntryType {
  STATUS_CHANGE
  PANEL_OPEN
  PANEL_CLOSE
  PANEL_DECISION
  POLICY_CHANGE
  NOTE
}

/// --- P1: Deliberation Core ---
enum DeliberationHostType {
  article
  post
  room_thread
  library_stack
  site
  inbox_thread
  work
}

enum RepresentationRule {
  utilitarian
  harmonic
  maxcov
}

enum EdgeType {
  support
  rebut
  undercut
  concede
  CA
}

// IAMT granularity for counters
enum TargetScope {
  conclusion
  premise
  inference
}

enum Quantifier {
  SOME
  MANY
  MOST
  ALL
}

enum Modality {
  COULD
  LIKELY
  NECESSARY
}

enum MediaType {
  text
  image
  video
  audio
}

enum TargetType {
  argument
  claim
  card
  warrant
  rebuttal
}

// ---------- Governance core ----------
model DecisionReceipt {
  id         String            @id @default(cuid())
  roomId     String
  actorId    String
  action     String // e.g., "STATUS_CHANGE", "PANEL_DECISION"
  reason     String?
  targetType ContentTargetType
  targetId   String
  panelId    String?
  policyId   String?
  createdAt  DateTime          @default(now())

  panel Panel? @relation(fields: [panelId], references: [id])

  @@index([roomId, createdAt])
}

model RoomLogbook {
  id        String       @id @default(cuid())
  roomId    String
  entryType LogEntryType
  summary   String
  payload   Json?
  createdAt DateTime     @default(now())
}

// Latest status for any polymorphic content in a room.
// History is kept via DecisionReceipt + RoomLogbook (immutable).
model ContentStatus {
  id            String            @id @default(cuid())
  roomId        String?
  targetType    ContentTargetType
  targetId      String
  currentStatus ModerationStatus
  prevStatus    ModerationStatus?
  reason        String?
  decidedById   String?
  panelId       String?
  createdAt     DateTime          @default(now())

  @@unique([roomId, targetType, targetId])
}

model Panel {
  id        String            @id @default(cuid())
  roomId    String
  openedAt  DateTime          @default(now())
  closedAt  DateTime?
  panelists Panelist[]
  receipts  DecisionReceipt[]
}

model Panelist {
  id       String       @id @default(cuid())
  panelId  String
  userId   String
  role     PanelistRole @default(member)
  joinedAt DateTime     @default(now())

  panel Panel @relation(fields: [panelId], references: [id])

  @@unique([panelId, userId])
}

model DeliberationCard {
  id                        String   @id @default(cuid())
  deliberationId            String
  authorId                  String
  status                    String
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  claimText                 String
  reasonsText               String[]
  evidenceLinks             String[]
  anticipatedObjectionsText String[]
  counterText               String?
  confidence                Float?
  warrantText               String?
  hostEmbed                 String?
  hostId                    String?
  moid                      String   @unique

  bridgeSummaryAssignments BridgeAssignment[] @relation("BridgeSummaryCard")

  // New relation to Claim
  claimId String?
  claim   Claim?  @relation(fields: [claimId], references: [id], onDelete: SetNull)

  // Relation to Deliberation
  deliberation Deliberation @relation(fields: [deliberationId], references: [id])

  // Back relation for CardCitation
  citations CardCitation[]

  @@index([deliberationId, createdAt]) // cards by delib, time-sorted
  @@index([deliberationId, status, createdAt])
  @@index([deliberationId, authorId, createdAt])
}

model CardCitation {
  id     String @id @default(cuid())
  cardId String
  uri    String

  locatorStart String? // e.g., CSS/XPath/char off
  locatorEnd   String?
  excerptHash  String?
  snapshotKey  String?
  cslJson      Json?

  card DeliberationCard @relation(fields: [cardId], references: [id], onDelete: Cascade)
}

model MissingPremise {
  id             String    @id @default(cuid())
  deliberationId String
  targetType     String // 'argument' | 'card'
  targetId       String
  proposedById   String
  text           String
  status         String    @default("proposed") // 'proposed'|'accepted'|'declined'
  premiseType    String    @default("premise") // 'premise'|'warrant'
  createdAt      DateTime  @default(now())
  decidedAt      DateTime?
}

// Optional storage for Rhetoric Lens v0 (client-heuristic can be ephemeral)
model ArgumentAnnotation {
  id          String   @id @default(cuid())
  targetType  String // 'argument' | 'card'
  targetId    String
  type        String // 'metaphor'|'analogy'|'hedge'|'intensifier'|'implicature'
  offsetStart Int
  offsetEnd   Int
  text        String
  source      String // 'heuristic'|'human'|'ml'
  createdAt   DateTime @default(now())
}

enum AttackType {
  REBUTS
  UNDERCUTS
  UNDERMINES
}

// =====================
// M3: Attack-kind enum
// =====================

enum ClaimAttackType {
  SUPPORTS
  REBUTS
  UNDERCUTS
  UNDERMINES
}

enum ClaimEdgeType {
  supports
  rebuts
}

enum EvidenceKind {
  primary
  secondary
  dataset
  code
}

enum UrnEntityType {
  claim
  card
  brief_version
}

enum GroundLabel {
  IN
  OUT
  UNDEC
}

model Claim {
  id          String             @id @default(cuid())
  text        String
  createdById String
  moid        String             @unique
  createdAt   DateTime           @default(now())
  cards       DeliberationCard[]
  warrant     ClaimWarrant? // 👈 back-relation

  deliberationId String?
  deliberation   Deliberation? @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  arguments Argument[] @relation("ArgumentClaim")

  edgesFrom ClaimEdge[]     @relation("fromClaim")
  edgesTo   ClaimEdge[]     @relation("toClaim")
  citations ClaimCitation[]

  claimType String? // "Agent" | "Assertion" | "Domain" | ...

  urns        Urn[]        @relation("ClaimUrns")
  ClaimLabel  ClaimLabel?
  claimValues ClaimValue[] // <— opposite side for ClaimValue.claim

  ClaimEvidence ClaimEvidence[]

  sourceProposition Proposition? @relation("PropositionClaim")

  IssueLink IssueLink[]

  // NEW
  canonicalClaimId String?
  canonical        CanonicalClaim? @relation(fields: [canonicalClaimId], references: [id], onDelete: SetNull)

  // NEW (optional negation link for DS pl later)
  negatesClaimId String?
  negates        Claim?  @relation("NegationClaims", fields: [negatesClaimId], references: [id], onDelete: SetNull)
  negatedBy      Claim[] @relation("NegationClaims")

  debateNodes  DebateNode[] @relation(name: "ClaimDebateNodes")
  canonicalKey String?      @unique

  asPremiseOf  ArgumentPremise[]
  asConclusion Argument[]        @relation("Conclusion")

  @@index([deliberationId, id], name: "claim_delib_id") // NEW
  @@index([deliberationId, createdAt]) // claims by delib, time-sorted
  @@index([canonicalClaimId])
  @@index([negatesClaimId])
  @@index([deliberationId])
  @@index([deliberationId, createdById, createdAt])
}

model ClaimEdge {
  id          String        @id @default(cuid())
  fromClaimId String
  toClaimId   String
  type        ClaimEdgeType
  targetScope String? // 'premise' | 'inference' | 'conclusion'

  createdAt  DateTime         @default(now())
  attackType ClaimAttackType? // UNDERCUTS | UNDERMINES | REBUTS | SUPPORTS?

  deliberationId String?
  Deliberation   Deliberation? @relation(fields: [deliberationId], references: [id])

  from Claim @relation("fromClaim", fields: [fromClaimId], references: [id], onDelete: Cascade)
  to   Claim @relation("toClaim", fields: [toClaimId], references: [id], onDelete: Cascade)

  @@unique([fromClaimId, toClaimId, type, attackType], name: "unique_from_to_type_attack")
  @@index([deliberationId, fromClaimId], name: "claimedge_delib_from") // NEW
  @@index([deliberationId, toClaimId], name: "claimedge_delib_to") // NEW
  @@index([fromClaimId])
  @@index([toClaimId])
  @@index([deliberationId])
  @@index([toClaimId, createdAt]) // inbound edges
  @@index([fromClaimId, createdAt]) // outbound edges
}

model ClaimLabel {
  id             String      @id @default(cuid())
  deliberationId String?
  claimId        String      @unique
  semantics      String // 'grounded'
  label          GroundLabel
  explainJson    Json?
  computedAt     DateTime    @default(now())

  claim Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@index([deliberationId])
}

model ClaimCitation {
  id           String  @id @default(cuid())
  claimId      String
  uri          String
  locatorStart Int?
  locatorEnd   Int?
  excerptHash  String
  snapshotKey  String?
  cslJson      Json?
  note         String?

  claim Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@index([claimId])
}

model ClaimStats {
  deliberationId String
  claimId        String
  approvalsCount Int      @default(0)
  supportsCount  Int      @default(0)
  rebutsCount    Int      @default(0)
  undercutsCount Int      @default(0)
  updatedAt      DateTime @default(now())

  @@id([deliberationId, claimId])
  @@index([deliberationId])
  @@index([approvalsCount])
  @@index([undercutsCount])
  @@map("claim_stats")
}

model CanonicalClaim {
  id        String   @id @default(cuid())
  slug      String   @unique
  title     String
  summary   String?
  createdAt DateTime @default(now())

  claims Claim[]
}

model ClaimEvidence {
  id        String   @id @default(cuid())
  claimId   String
  uri       String
  title     String?
  citation  String?
  addedById String?
  createdAt DateTime @default(now())

  claim Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)

  @@index([claimId])
}

model Urn {
  id         String   @id @default(cuid())
  entityId   String
  entityType String
  urn        String   @unique
  createdAt  DateTime @default(now())

  claim Claim? @relation("ClaimUrns", fields: [entityId], references: [id])
}

model ArgumentScheme {
  id          String  @id @default(cuid())
  key         String  @unique
  name        String?
  description String?
  title       String?

  summary        String
  cq             Json             @default("{}") // we'll set a DB default to [] below; this avoids null
  SchemeInstance SchemeInstance[]

  // Macagno taxonomy:
  purpose          String? // 'action' | 'state_of_affairs'
  source           String? // 'internal' | 'external'
  materialRelation String? // 'cause' | 'definition' | 'analogy' | 'authority' | ...
  reasoningType    String? // 'deductive' | 'inductive' | 'abductive' | 'practical'
  ruleForm         String? // 'MP' | 'MT' | 'defeasible_MP' | ...
  conclusionType   String? // 'ought' | 'is' | ...
  slotHints        Json? // UI slot descriptions
  variants         SchemeVariant[]
  cqs              CriticalQuestion[]
  validators       Json? // CAS2-style v/e metadata (optional)
  Argument         Argument[]
}

model CQStatus {
  id         String     @id @default(cuid())
  targetType TargetType
  targetId   String
  argumentId String?
  status     String? // 'open' | 'answered'

  schemeKey   String
  cqKey       String
  satisfied   Boolean  @default(false)
  groundsText String?  // Stores the text response/grounds for the CQ
  createdById String
  roomId      String? // denormalized at write-time for RLS
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([targetType, targetId, schemeKey, cqKey])
  @@index([targetType, targetId, schemeKey])
  @@index([targetType, targetId])
  @@index([roomId])
}

enum Illocution {
  Assert
  Question
  Argue
  Concede
  Retract
  Close
}

// If you need a simple edge model for the /api/attacks route (optional — skip if you already have edges):
model GraphEdge {
  id          String   @id @default(cuid())
  fromId      String
  toId        String
  type        String // 'undercut' | 'rebut'
  scope       String? // 'premise' | 'conclusion' (for rebut)
  roomId      String
  createdById String
  meta        Json? // { schemeKey, cqKey }
  createdAt   DateTime @default(now())

  @@index([roomId])
  @@index([fromId, toId])
}

model SchemeInstance {
  id          String   @id @default(cuid())
  targetType  String // 'card'|'claim'
  targetId    String
  schemeId    String
  data        Json // filled slots: {expert:{name,field}, statement, sourceUri, ...}
  createdById String
  createdAt   DateTime @default(now())

  scheme           ArgumentScheme     @relation(fields: [schemeId], references: [id], onDelete: Cascade)
  CriticalQuestion CriticalQuestion[]

  @@index([targetType, targetId])
}

model CriticalQuestion {
  id           String          @id @default(cuid())
  instanceId   String?
  schemeId     String?
  scheme       ArgumentScheme? @relation(fields: [schemeId], references: [id], onDelete: Cascade)
  cqKey        String?
  cqId         String?
  text         String
  attackKind   String // 'UNDERMINES'|'UNDERCUTS'|'REBUTS'
  status       String // 'open'|'addressed'|'counter-posted'
  openedById   String?
  resolvedById String?
  createdAt    DateTime        @default(now())
  // for automation: how the CQ maps to an attack
  attackType   AttackType? // REBUTS | UNDERCUTS | UNDERMINES
  targetScope  TargetScope? // conclusion | inference | premise
  instance     SchemeInstance? @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([schemeId, cqKey])
  @@index([instanceId])
}

model ClaimWarrant {
  id        String   @id @default(cuid())
  claimId   String   @unique
  text      String
  createdBy String
  createdAt DateTime @default(now())
  claim     Claim    @relation(fields: [claimId], references: [id], onDelete: Cascade)
}

enum ReplyTarget {
  claim
  argument
  premise
  link
  presupposition
}

model DialogueMove {
  id         String      @id @default(cuid())
  authorId   String?
  type       String? // existing kind: ASSERT|WHY|GROUNDS|CONCEDE|RETRACT|CLOSE...
  illocution Illocution?

  deliberationId String
  targetType     String // 'argument'|'claim'
  targetId       String
  kind           String // 'ASSERT'|'WHY'|'GROUNDS'|'RETRACT'
  payload        Json?
  actorId        String
  createdAt      DateTime @default(now())

  replyToMoveId String? // explicit reply threading (nullable, backfill later)
  replyTarget   ReplyTarget? // scope of reply (nullable, backfill later)

  // add fields (null-safe for backward compat)
  polarity       String? // 'P'|'O'
  locusId        String?
  endsWithDaimon Boolean @default(false)
  argumentId     String? // GROUNDS (anchors an RA)

  signature String @db.VarChar(255)

  @@unique([deliberationId, signature], name: "dm_unique_signature")
  @@index([deliberationId, targetType, targetId, kind, createdAt], name: "dm_by_target_kind_time")
  @@index([payload], type: Gin, name: "dm_payload_gin")
  @@index([deliberationId])
  @@index([targetType, targetId])
}

enum ProofMode {
  symmetric
  asymmetric // stricter burden for Proponent
}

model Deliberation {
  id              String               @id @default(cuid())
  hostType        DeliberationHostType
  hostId          String
  rule            RepresentationRule   @default(utilitarian)
  k               Int                  @default(3)
  createdById     String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  cards           DeliberationCard[]
  title           String?
  AgoraRoom       AgoraRoom?           @relation(fields: [agoraRoomId], references: [id], onDelete: SetNull)
  agoraRoomId     String?
  agoraRoomID     String?
  roomId          String?
  arguments       Argument[]
  edges           ArgumentEdge[]
  approvals       ArgumentApproval[]
  selections      ViewpointSelection[]
  Issue           Issue[]
  Claim           Claim[]
  ClaimEdge       ClaimEdge[]
  Cluster         Cluster[]
  TheoryWork      TheoryWork[]
  KnowledgeEdge   KnowledgeEdge[]
  workProvenances WorkProvenance[] // For WorkProvenance.deliberation

  IssueLink IssueLink[]

  proofMode ProofMode @default(symmetric)

  tags    String[]             @default([])
  roles   DeliberationRole[]
  calls   DeliberationCall[]
  anchors DeliberationAnchor[]

  upgradedFromDiscussionId String?     @unique
  upgradedFromDiscussion   Discussion? @relation("DiscussionToDeliberation", fields: [upgradedFromDiscussionId], references: [id])

  // ✅ back-relations for StackReference (two directed edges to Deliberation)
  stackRefsFrom StackReference[] @relation("StackRefFrom")
  stackRefsTo   StackReference[] @relation("StackRefTo")

  // ✅ back-relations for ArgumentImport (two directed edges to Deliberation)
  argImportsFrom ArgumentImport[] @relation("ArgImpFrom")
  argImportsTo   ArgumentImport[] @relation("ArgImpTo")

  // ✅ back-relations for SharedAuthorRoomEdge (two directed edges to Deliberation)
  sharedAuthorsFrom      SharedAuthorRoomEdge[]   @relation("SharedAuthorFrom")
  sharedAuthorsTo        SharedAuthorRoomEdge[]   @relation("SharedAuthorTo")
  DebateSheet            DebateSheet[]
  WorkSourceDeliberation WorkSourceDeliberation[]

  @@index([agoraRoomID])
  @@index([hostType, hostId])
  @@index([roomId])
}

model DeliberationAnchor {
  id String @id @default(cuid())

  deliberationId String
  deliberation   Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  targetType   String // 'stack' | 'stack:item' | 'article' | 'comment' | 'selection' | 'image' | 'video'
  targetId     String? // id when applicable
  selectorJson Json? // W3C Web Annotation selectors, media fragments (#t=), bbox, etc.
  title        String?
  snippet      String?
  createdById  String
  createdAt    DateTime @default(now())
  // Optional: avoid duplicate anchors per target
  // @@unique([deliberationId, targetType, targetId])

  @@index([deliberationId])
  @@index([targetType, targetId])
  @@index([createdById])
}

model DeliberationRole {
  id             String   @id @default(cuid())
  deliberationId String
  userId         String
  role           String // 'author'|'methodologist'|'practitioner'|…
  invitedById    String?
  createdAt      DateTime @default(now())

  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@unique([deliberationId, userId, role])
  @@index([deliberationId, role])
}

model DeliberationCall {
  id             String    @id @default(cuid())
  deliberationId String
  description    String
  deadline       DateTime?
  rolesNeeded    String[]  @default([]) // ['methodologist','domain-expert']
  createdById    String
  createdAt      DateTime  @default(now())

  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@index([deliberationId, createdAt])
}

model DeliberationPref {
  deliberationId   String   @id
  profile          String // 'community' | 'policy' | 'scientific'
  minRelevance     Float    @default(0.5)
  minSufficiency   Float    @default(0.5)
  minAcceptability Float    @default(0.5)
  updatedAt        DateTime @updatedAt
  createdAt        DateTime @default(now())
}

model Value {
  id          String       @id @default(cuid())
  key         String       @unique
  label       String
  // ADD THIS:
  claimValues ClaimValue[] // <— opposite side for ClaimValue.value
}

model ClaimValue {
  claimId String
  valueId String
  weight  Int    @default(1)

  claim Claim @relation(fields: [claimId], references: [id], onDelete: Cascade)
  value Value @relation(fields: [valueId], references: [id], onDelete: Cascade)

  @@id([claimId, valueId])
  @@index([valueId])
}

model AudiencePreference {
  id        String   @id @default(cuid())
  ownerType String // 'user'|'room'|'cohort'
  ownerId   String
  order     String // e.g. "Fairness>Autonomy>Efficiency"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([ownerType, ownerId])
}

model CareLedger {
  id        String   @id @default(cuid())
  userId    String
  delta     Int
  reason    String // 'bridge_completed'|'synthesis_accepted'|...
  refType   String // 'assignment'|'bounty'
  refId     String
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model Commitment {
  id             String   @id @default(cuid())
  deliberationId String
  participantId  String
  proposition    String   @db.Text
  isRetracted    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([deliberationId, participantId, proposition])
  @@index([deliberationId, participantId])
}

// ----- bounties -----
model Bounty {
  id          String             @id @default(cuid())
  roomId      String
  type        String // 'synthesis' | 'source' | 'replication' | 'bridge'
  title       String
  brief       String
  rewardCare  Int
  status      String             @default("open")
  opensAt     DateTime?
  closesAt    DateTime?
  createdAt   DateTime           @default(now())
  // ADD THIS:
  submissions BountySubmission[] // <— opposite side
}

model BountySubmission {
  id             String   @id @default(cuid())
  bountyId       String
  submitterId    String
  submissionType String // 'card'|'brief'|'claim'
  submissionId   String
  status         String   @default("submitted")
  createdAt      DateTime @default(now())

  bounty Bounty @relation(fields: [bountyId], references: [id], onDelete: Cascade)
}

/// ====== Theory Models ======

enum PhilosophyTheoryType {
  DN // Descriptive–Nomological
  IH // Idealizing–Hermeneutic
  TC // Technical–Constructive
  OP // Ontic–Practical
}

enum WorkStatus {
  DRAFT
  ACTIVE
  PUBLISHED
  ARCHIVED
}

model TheoryWork {
  id             String               @id @default(cuid())
  slug           String               @unique
  title          String
  authorId       String
  theoryType     PhilosophyTheoryType
  summary        String?              @db.Text
  body           String               @db.Text
  standardOutput String?

  // ↓ Decouple: deliberation is provenance, not container
  deliberationId String? // was required → optional
  deliberation   Deliberation? @relation(fields: [deliberationId], references: [id], onDelete: SetNull)

  // ✅ ADD ALL THESE BACK-RELATIONS:
  claims                 TheoryWorkClaim[] // Line 3614 error
  ihProject              WorkIhProject? // Line 3630 error
  dnProject              WorkDnProject? // Line 3648 error
  tcProject              WorkTcProject? // Line 3657 error
  opProject              WorkOpProject? // Line 3665 error
  dnStructure            WorkDNStructure? // Line 3676 error
  ihTheses               WorkIHTheses? // Line 3686 error
  tcTheses               WorkTCTheses? // Line 3696 error
  opTheses               WorkOPTheses? // Line 3705 error
  provenances            WorkProvenance[] // Line 3724 error
  practicalJustification WorkPracticalJustification? @relation("Work_to_Practical")
  hermeneuticProject     WorkHermeneuticProject?     @relation("Work_to_HermeneuticProject")
  pascalModel            WorkPascalModel?            @relation("Work_to_PascalModel")

  rules Rule[] // Line 3797 error

  // NEW: KB anchoring
  kbPageId String?
  kbPage   KbPage? @relation(fields: [kbPageId], references: [id])

  // Integrity & publication
  integrityChecks Json? // dn/ih/tc/op adequacy payloads + mcda snapshot refs
  integrityValid  Boolean    @default(false)
  status          WorkStatus @default(DRAFT)
  visibility      String     @default("room")
  publishedAt     DateTime?
  lastExport      Json?

  // Existing 1:1s unchanged (dn/tc/op/ih…), snapshots, practicalJustification etc.

  // NEW: citations bridge (polymorphic targets)
  citations TheoryWorkCitation[]

  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  WorkSourceDeliberation WorkSourceDeliberation[]

  @@index([kbPageId])
  @@index([authorId, createdAt])
}

/// Bridge: a Work can cite claims, arguments, propositions, and other works
model TheoryWorkCitation {
  id         String   @id @default(cuid())
  workId     String
  targetType String // 'claim' | 'argument' | 'proposition' | 'work'
  targetId   String
  section    String? // optional: where in the Work was it used
  role       String // 'premise' | 'evidence' | 'example' | 'counterpoint' | 'reference' | 'thesis'
  note       String?
  createdAt  DateTime @default(now())
  kbPageId   String?
  kbPage     KbPage?  @relation(fields: [kbPageId], references: [id])

  work TheoryWork @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([workId, targetType, targetId, section])
  @@index([kbPageId])
  @@index([targetType, targetId])
}

/// Optional: track additional source deliberations beyond the Work's home one
model WorkSourceDeliberation {
  workId         String
  deliberationId String
  role           String   @default("source") // 'source' | 'context' | ...
  createdAt      DateTime @default(now())

  work         TheoryWork   @relation(fields: [workId], references: [id], onDelete: Cascade)
  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@id([workId, deliberationId])
  @@index([deliberationId])
}

model TheoryWorkClaim {
  id      String     @id @default(cuid())
  workId  String
  claimId String
  role    String // 'thesis'|'premise'|'exception'|'application'|'counter' etc.
  order   Int        @default(0)
  work    TheoryWork @relation(fields: [workId], references: [id], onDelete: Cascade)

  @@unique([workId, claimId, role])
  @@index([claimId])
}

model WorkIhProject {
  workId              String     @id
  practiceDescription String?
  idealStandard       String? // TIH9 seed
  methodNotes         String?
  // NEW: explicit reasons
  subjectiveReasons   Json? // [{source, agent, reason, evidenceIds[]}]
  objectiveReasons    Json? // [{criterion, evaluation, warrant}]
  corroborationJson   Json?
  applicationsJson    Json?
  TheoryWork          TheoryWork @relation(fields: [workId], references: [id])
}

model WorkDnProject {
  workId           String     @id
  definitionsJson  Json?
  axiomsJson       Json?
  theoremsJson     Json?
  confirmingJson   Json? // link to claim/evidence ids
  // NEW: first-class DN5 scoring on GDN*
  optimalityJson   Json? // {
  //   coherence:{ok:boolean, notes:string},  // GDN1
  //   confirmation:{ok:boolean, refs:[]},    // GDN2
  //   noFalsification:{status:'none'|'minor'|'serious'}, // GDN3
  //   simplicity:{ontological:number, semantic:number}, // GDN4-5
  //   scope:number, connectivity:number, predictivePower:number // GDN6-8
  // }
  applicationsJson Json?
  TheoryWork       TheoryWork @relation(fields: [workId], references: [id])
}

model WorkTcProject {
  workId                 String     @id
  structureDescription   String?
  functionDescription    String?
  explanationFunctioning String?
  applicationsJson       Json? // {context, howToUse, expectedOutcomes}
  TheoryWork             TheoryWork @relation(fields: [workId], references: [id])
}

model WorkOpProject {
  workId                         String     @id
  unrecognizabilityJustification String? // TOP2
  // TOP3: link to Pascal.propositions/actions/utilities already stored
  alternativesJson               Json? // aliased to pascal.propositions (optional copy)
  TheoryWork                     TheoryWork @relation(fields: [workId], references: [id])
}

model WorkDNStructure {
  id             String  @id @default(cuid())
  workId         String  @unique
  // TDN*: keep it simple and explicit
  explanandum    String? // phenomenon described
  nomological    String? // laws/regularities
  ceterisParibus String?

  work TheoryWork @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model WorkIHTheses {
  id          String  @id @default(cuid())
  workId      String  @unique
  structure   String? // TIH: structure
  function    String? // TIH: function
  objectivity String? // TIH: objectivity

  work TheoryWork @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model WorkTCTheses {
  id                 String   @id @default(cuid())
  workId             String   @unique
  instrumentFunction String? // TTC: function
  explanation        String? // TTC: explanation
  applications       String[] // TTC: applications

  work TheoryWork @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model WorkOPTheses {
  id                String   @id @default(cuid())
  workId            String   @unique
  unrecognizability String? // TOP: unrecognizability
  alternatives      String[] // TOP: considered alts (labels)

  work TheoryWork @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model TheoryWorkSnapshot {
  id        String   @id @default(cuid())
  workId    String
  kind      String // 'sheet'|'kb'|'aif'
  payload   Json // frozen expansion (claims, edges, CQ stats, evidence)
  createdAt DateTime @default(now())

  @@index([workId, createdAt])
}

model WorkProvenance {
  id             String   @id @default(cuid())
  workId         String
  deliberationId String
  role           String // 'source' | 'context'
  createdAt      DateTime @default(now())

  work         TheoryWork   @relation(fields: [workId], references: [id], onDelete: Cascade)
  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@unique([workId, deliberationId, role])
  @@index([deliberationId])
}

model WorkPracticalJustification {
  id        String     @id @default(cuid())
  workId    String     @unique
  purpose   String     @default("")
  criteria  Json       @default("[]")
  options   Json       @default("[]")
  scores    Json       @default("{}")
  result    Json       @default("{}")
  // NEW:
  adequacy  Json       @default("{}") // { completeness:true|false, dominance:'none'|'weak'|'strong', robustness:{sensitivityNotes:string} }
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  work      TheoryWork @relation("Work_to_Practical", fields: [workId], references: [id], onDelete: Cascade)
}

/// ========= IH (interpretive phase) =========
model WorkHermeneuticProject {
  id           String   @id @default(cuid())
  workId       String   @unique
  corpusUrl    String?
  facts        Json     @default("[]")
  hypotheses   Json     @default("[]")
  plausibility Json     @default("[]")
  selectedIds  Json     @default("[]")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // child owns FK and declares fields/references + SAME relation name
  work TheoryWork @relation("Work_to_HermeneuticProject", fields: [workId], references: [id], onDelete: Cascade)
}

/// ========= OP (Pascal-as-if) =========
model WorkPascalModel {
  id                    String     @id @default(cuid())
  workId                String     @unique
  propositions          Json       @default("[]") // worlds
  actions               Json       @default("[]")
  utilities             Json       @default("{}")
  assumption            String? // notes
  // NEW:
  exhaustiveExclusive   Boolean? // PP1/TOP3
  noTheoreticalEvidence Boolean? // PP3/TOP2
  orientationCriteria   String? // what counts as 'orientation-relevant' (TOP4)
  decision              Json       @default("{}") // include method + laplace details
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  work                  TheoryWork @relation("Work_to_PascalModel", fields: [workId], references: [id], onDelete: Cascade)
}

// (optional) history table if you want revisions now
model WorkPracticalRevision {
  id        String   @id @default(cuid())
  workId    String
  snapshot  Json // entire justification row at save time
  createdAt DateTime @default(now())

  @@index([workId, createdAt])
}

model Rule {
  id     String     @id @default(cuid())
  workId String
  kind   String // 'STRICT' | 'DEFEASIBLE'
  head   String // x
  body   String // y1 & ... & yn
  meta   Json?
  work   TheoryWork @relation(fields: [workId], references: [id], onDelete: Cascade)
}

model ReasonPair {
  id             String   @id @default(cuid())
  deliberationId String
  claimId        String
  reasonId       String // could point to a Claim, or a literal string y
  stance         String // 'FOR'|'AGAINST'|'NOT_FOR'|'NOT_AGAINST'
  strong         Boolean? // true if (¬y ∨ x) holds (LA strong link)
  meta           Json?
  createdAt      DateTime @default(now())
}

/// =========================
/// Aux: Knowledge / NLI / Eristic
/// =========================

enum KnowledgeEdgeKind {
  SUPPLIES_PREMISE
  REVISES
  CHALLENGES
  SUPPORTS
  REBUTS
  UNDERCUTS
  UNDERMINES
  ALTERNATIVE_TO
  EVALUATES
  REASON_FOR
  REASON_AGAINST
  NOT_REASON_FOR // ¬(x, y)
  NOT_REASON_AGAINST // ¬(¬x, y)
  CONCLUSIVE_ABOUT // (x, y) ∨ (¬x, y)
  INCONCLUSIVE_ABOUT
  ENTAILS // strong link (¬y ∨ x, >)
}

model KnowledgeEdge {
  id             String            @id @default(cuid())
  deliberationId String
  kind           KnowledgeEdgeKind
  meta           Json?
  fromWorkId     String?
  toWorkId       String?
  fromClaimId    String?
  toClaimId      String?
  createdAt      DateTime          @default(now())

  deliberation Deliberation @relation(fields: [deliberationId], references: [id], onDelete: Cascade)

  @@unique([deliberationId, kind, fromWorkId, toWorkId])
  @@index([deliberationId, kind, createdAt])
  @@index([fromWorkId, toWorkId])
  @@index([fromClaimId, toClaimId])
}

model NLILink {
  id          String   @id @default(cuid())
  fromId      String?
  toId        String?
  relation    String
  score       Float
  createdById String?
  createdAt   DateTime @default(now())

  @@index([fromId, toId])
  @@index([relation, score])
}

model EristicMark {
  id             String   @id @default(cuid())
  deliberationId String
  targetType     String
  targetId       String
  tactic         String
  detector       String
  strength       Float    @default(0)
  createdById    String?
  createdAt      DateTime @default(now())

  @@index([deliberationId, targetType, targetId])
}

/// =========================
/// Ludics: enums
/// =========================
enum LudicPolarity {
  P
  O
  DAIMON
}

enum LudicActKind {
  PROPER
  DAIMON
}

enum LudicTraceStatus {
  ONGOING
  CONVERGENT
  DIVERGENT
}

/// =========================
/// Ludics: core models
/// =========================

model LudicLocus {
  id              String       @id @default(cuid())
  dialogueId      String? // NEW: scope by dialogue to avoid global "0" clashes
  path            String       @db.VarChar(255)
  parentId        String?
  parent          LudicLocus?  @relation("LocusChildren", fields: [parentId], references: [id])
  children        LudicLocus[] @relation("LocusChildren")
  createdByTurnId String?
  extJson         Json?

  // existing back-relations...
  faxFrom                LudicFaxMap[]            @relation("FaxFrom")
  faxTo                  LudicFaxMap[]            @relation("FaxTo")
  LudicDesign            LudicDesign[]
  LudicAct               LudicAct[]
  LudicCommitmentElement LudicCommitmentElement[]

  @@unique([dialogueId, path]) // ✅ was: @unique on path; now scoped
  @@index([dialogueId, path])
}

model LudicDesign {
  id             String     @id @default(cuid())
  deliberationId String
  participantId  String
  rootLocusId    String
  rootLocus      LudicLocus @relation(fields: [rootLocusId], references: [id])
  semantics      String     @default("ludics-v1")
  hasDaimon      Boolean    @default(false)
  version        Int        @default(1)
  extJson        Json?

  chronicles LudicChronicle[]
  acts       LudicAct[]

  // traces (already fixed)
  tracesAsPos LudicTrace[] @relation("Trace_Pos")
  tracesAsNeg LudicTrace[] @relation("Trace_Neg")

  // ⬇️ add this (implicit M:N back-relation)
  commitmentElements LudicCommitmentElement[]

  @@index([deliberationId, participantId])
}

model LudicAct {
  id       String      @id @default(cuid())
  designId String
  design   LudicDesign @relation(fields: [designId], references: [id])

  kind     LudicActKind
  polarity LudicPolarity?
  locusId  String?
  locus    LudicLocus?    @relation(fields: [locusId], references: [id])

  ramification String[] // allowed next sub-addresses
  expression   String?
  metaJson     Json?
  isAdditive   Boolean  @default(false)

  orderInDesign  Int
  extJson        Json?
  LudicChronicle LudicChronicle[]

  @@index([designId, orderInDesign])
  @@index([locusId])
  @@index([designId, locusId])
}

model LudicChronicle {
  id       String      @id @default(cuid())
  designId String
  design   LudicDesign @relation(fields: [designId], references: [id])
  order    Int
  actId    String
  act      LudicAct    @relation(fields: [actId], references: [id])
}

model LudicTrace {
  id                            String           @id @default(cuid())
  deliberationId                String
  posDesignId                   String
  negDesignId                   String
  startLocusId                  String?
  steps                         Json
  status                        LudicTraceStatus
  endedAtDaimonForParticipantId String?
  createdAt                     DateTime         @default(now())
  extJson                       Json?

  posDesign LudicDesign @relation("Trace_Pos", fields: [posDesignId], references: [id])
  negDesign LudicDesign @relation("Trace_Neg", fields: [negDesignId], references: [id])

  @@index([deliberationId, createdAt])
  @@index([posDesignId])
  @@index([negDesignId])
}

model LudicCommitmentElement {
  id           String     @id @default(cuid())
  ownerId      String
  basePolarity String // 'pos' | 'neg'
  baseLocusId  String
  baseLocus    LudicLocus @relation(fields: [baseLocusId], references: [id])
  label        String?
  entitled     Boolean?   @default(true) // 👈 NEW

  extJson Json?

  // ⬇️ implicit M:N (no @relation name needed)
  designs                LudicDesign[]
  LudicCommitmentState   LudicCommitmentState? @relation(fields: [ludicCommitmentStateId], references: [id])
  ludicCommitmentStateId String?

  @@index([ownerId, basePolarity])
}

model LudicCommitmentState {
  id        String   @id @default(cuid())
  ownerId   String
  updatedAt DateTime @default(now())
  extJson   Json?

  elements LudicCommitmentElement[]

  @@index([ownerId])
}

model LudicFaxMap {
  id          String   @id @default(cuid())
  fromLocusId String
  toLocusId   String
  createdBy   String?
  createdAt   DateTime @default(now())
  extJson     Json?

  from LudicLocus @relation("FaxFrom", fields: [fromLocusId], references: [id])
  to   LudicLocus @relation("FaxTo", fields: [toLocusId], references: [id])
}

model LudicBehaviour {
  id             String   @id @default(cuid())
  deliberationId String // scope to a dialogue
  base           String // e.g., "⊢ ξ" or "ξ ⊢"
  polarity       String // 'positive' | 'negative'
  regular        Boolean? // computed flag
  uniformBound   Int? // if known/claimed
  createdAt      DateTime @default(now())

  // Membership (incarnation)
  materialDesigns LudicMaterialDesign[]
}

model LudicMaterialDesign {
  id               String          @id @default(cuid())
  behaviourId      String
  designId         String // FK to your existing ludicDesign
  asOfStepId       String? // provenance
  pathsJson        Json // positive-ended chronicles for this material design
  LudicBehaviour   LudicBehaviour? @relation(fields: [ludicBehaviourId], references: [id])
  ludicBehaviourId String?
}

model LudicDecisionReceipt {
  id             String   @id @default(cuid())
  deliberationId String
  kind           String // 'epistemic' | 'procedural' | 'allocative' | 'editorial'
  subjectType    String // 'claim' | 'locus' | 'view' | 'option' | 'card'
  subjectId      String
  issuedBy       String // 'system' | 'panel:<userId>' | 'vote'
  rationale      String?  @db.Text
  inputsJson     Json // AF labels, CQ summary, tally, RV, ludics trace id, etc.
  version        Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([deliberationId, subjectType, subjectId])
}

model VoteSession {
  id             String    @id @default(cuid())
  deliberationId String
  subjectType    String // 'option' | 'view' | 'claim'
  subjectId      String
  method         String // 'approval' | 'rcv'
  optionsJson    Json // [{id,label,rvViewIndex?}]
  quorumMinCount Int?
  quorumMinPct   Float? // active-30d share
  closesAt       DateTime
  closedAt       DateTime?
  tallyJson      Json? // cached final tally
  winnerId       String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  ballots VoteBallot[]

  @@index([deliberationId, subjectType, subjectId])
}

model VoteBallot {
  id            String   @id @default(cuid())
  sessionId     String
  voterId       String
  approvalsJson Json? // approval: {optId:true}
  rankingJson   Json? // rcv:     [optId,...]
  createdAt     DateTime @default(now())

  session VoteSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@unique([sessionId, voterId])
}

model XRef {
  id        String   @id @default(cuid())
  fromType  String
  fromId    String
  toType    String
  toId      String
  relation  String // 'cites'|'evidence-for'|'discusses'|'originates-from'|'replies-to'|'cross-claim'|...
  metaJson  Json?
  createdAt DateTime @default(now())

  @@unique([fromType, fromId, toType, toId, relation])
  @@index([fromType, fromId])
  @@index([toType, toId])
  @@index([relation])
  @@index([fromType, fromId, relation])
  @@index([toType, toId, relation])
}

model WikiPage {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  entityUrn   String
  createdById String
  createdAt   DateTime @default(now())

  // 1–1 pointer to the current revision
  currentId String?       @unique
  current   WikiRevision? @relation("CurrentRev", fields: [currentId], references: [id])

  // 1–N: all revisions
  revisions WikiRevision[] @relation("AllRevs")

  @@index([entityUrn])
}

model WikiRevision {
  id          String   @id @default(cuid())
  pageId      String
  body        String   @db.Text
  citations   Json
  createdById String
  createdAt   DateTime @default(now())

  // backref for 1–N
  page WikiPage @relation("AllRevs", fields: [pageId], references: [id], onDelete: Cascade)

  // backref for 1–1 "current"
  currentOf WikiPage? @relation("CurrentRev")

  @@index([pageId])
}

model AgoraFollow {
  userId    String
  kind      String // 'room' | 'tag'
  targetId  String
  createdAt DateTime @default(now())

  @@id([userId, kind, targetId])
  @@index([kind, targetId])
}

model Discussion {
  id          String  @id @default(cuid())
  slug        String? @unique
  title       String
  description String?
  createdById String
  visibility  String  @default("public") // "public" | "private" | "unlisted"

  // Link to existing chat conversation (optional at creation; we can create on demand)
  conversationId BigInt? @unique

  conversation Conversation? @relation(fields: [conversationId], references: [id])

  // Polymorphic attachment to any object (optional)
  attachedToType String? // e.g. "article" | "comment" | "stack" | "claim" | "post"
  attachedToId   String? // store as string; can hold cuid, uuid, bigint, etc.

  upgradedToDeliberation Deliberation?           @relation("DiscussionToDeliberation")
  messages               DiscussionMessage[] // 👈 back-rel for DiscussionMessage.discussion
  participants           DiscussionParticipant[] // 👈 back-rel for DiscussionParticipant.discussion

  subscriptions DiscussionSubscription[]

  replyCount   Int      @default(0)
  viewCount    Int      @default(0)
  lastActiveAt DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  forumComments ForumComment[]
  deliberations DiscussionDeliberation[]

  ConversationParticipant ConversationParticipant[]

  @@index([attachedToType, attachedToId])
}

model DiscussionSubscription {
  id           String   @id @default(cuid())
  discussionId String
  userId       String
  createdAt    DateTime @default(now())

  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@unique([discussionId, userId])
  @@index([userId])
  @@index([discussionId])
  @@map("DiscussionSubscription")
}

model ForumComment {
  id           BigInt     @id @default(autoincrement())
  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id])
  parentId     BigInt?
  authorId     String

  // content
  body     Json // tiptap JSON (or your rich JSON format)
  bodyText String? // search/snippet convenience

  // cross-post source (chat → forum)
  sourceMessageId      Int? // original chat message id, for “promoted from chat”
  // (optional) if you ever need the conversation too:
  sourceConversationId Int?

  score     Int      @default(0)
  isDeleted Boolean  @default(false)
  isRemoved Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([discussionId, sourceMessageId])
  // prevents duplicate promote spam:
  @@index([discussionId, parentId]) // on ForumComment
  @@index([discussionId])
  @@index([parentId])
  @@index([sourceMessageId])
}

model DiscussionDeliberation {
  id             String     @id @default(cuid())
  discussionId   String
  discussion     Discussion @relation(fields: [discussionId], references: [id])
  deliberationId String // your existing deliberation id (string in your events route)
  createdById    String
  createdAt      DateTime   @default(now())

  @@unique([discussionId, deliberationId])
}

model DiscussionMessage {
  id String @id @default(cuid())

  discussionId String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  // Threading
  parentId String?
  parent   DiscussionMessage?  @relation("DiscussionMessageReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies  DiscussionMessage[] @relation("DiscussionMessageReplies")

  authorId String
  kind     String  @default("text") // text | media | system | poll | note | …
  text     String?
  richJson Json?

  // Ephemeral / pinning
  isPinned    Boolean   @default(false)
  isEphemeral Boolean   @default(false)
  expiresAt   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reactions DiscussionReaction[]

  @@index([discussionId])
  @@index([parentId])
  @@index([authorId])
  @@index([expiresAt])
  @@index([isPinned])
}

model DiscussionReaction {
  id        String            @id @default(cuid())
  messageId String
  message   DiscussionMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  userId    String
  kind      String // e.g. 'like', 'emoji:👍', 'flag'
  createdAt DateTime          @default(now())

  @@unique([messageId, userId, kind])
  @@index([userId])
}

model DiscussionParticipant {
  discussionId String
  userId       String
  role         String    @default("member") // member | moderator | owner
  lastReadAt   DateTime?
  createdAt    DateTime  @default(now())

  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@id([discussionId, userId])
  @@index([userId])
}

model ForumVote {
  userId    BigInt
  commentId BigInt
  dir       Int // -1, 0, 1
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, commentId])
  @@index([commentId])
}

// Saves (bookmarks) are simple toggles
model ForumSave {
  userId    BigInt
  commentId BigInt
  createdAt DateTime @default(now())

  @@id([userId, commentId])
  @@index([commentId])
}

model AgoraOutbox {
  id             String   @id @default(cuid())
  ts             DateTime @default(now())
  topic          String
  roomId         String?
  deliberationId String?
  targetType     String?
  targetId       String?
  payload        Json?
  delivered      Boolean  @default(false)

  @@index([ts])
  @@index([topic, deliberationId])
}

// ---------- Enums (top-level) ----------
enum DebateEdgeKind {
  supports
  rebuts
  objects
  undercuts
  refines
  restates
  clarifies
  depends_on
}

enum StatementRole {
  premise
  intermediate
  conclusion
  assumption
  question
  warrant
}

enum InferenceKind {
  presumptive
  deductive
  inductive
  abductive
  defeasible
  analogy
}

model Outcome {
  id            String       @id @default(cuid())
  kind          String?
  summary       String?
  DebateSheet   DebateSheet? @relation(fields: [debateSheetId], references: [id])
  debateSheetId String?
}

// ---------- DebateSheet substrate ----------

// --- DebateSheet: keep ONE link to AgoraRoom ---
model DebateSheet {
  id          String   @id @default(cuid())
  title       String
  scope       String?
  roles       String[] @default([])
  rulesetJson Json?

  // (optional) link to a deliberation if you added it earlier
  deliberationId String?
  deliberation   Deliberation? @relation(fields: [deliberationId], references: [id], onDelete: SetNull)

  // ✅ keep ONE FK + relation to AgoraRoom, with a named relation
  roomId String?
  room   AgoraRoom? @relation(name: "RoomSheets", fields: [roomId], references: [id], onDelete: SetNull)

  // REMOVE any duplicate fields like:
  // AgoraRoom AgoraRoom? @relation(...)     // ❌ delete this line if present
  // agoraRoom AgoraRoom? @relation(...)     // ❌ delete this line if present

  nodes      DebateNode[]
  edges      DebateEdge[]
  loci       LocusStatus[]
  acceptance SheetAcceptance?
  unresolved UnresolvedCQ[]
  outcomes   Outcome[]

  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([deliberationId])
  @@index([roomId])
}

model DebateNode {
  id      String      @id @default(cuid())
  sheetId String
  sheet   DebateSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)

  title   String?
  summary String?

  // link to internal diagram
  diagramId String?          @unique
  diagram   ArgumentDiagram? @relation(fields: [diagramId], references: [id])

  // NEW: actual relations (instead of just scalar ids)
  argumentId String?
  argument   Argument? @relation(name: "ArgumentDebateNodes", fields: [argumentId], references: [id])

  claimId String?
  claim   Claim?  @relation(name: "ClaimDebateNodes", fields: [claimId], references: [id])

  authorsJson Json?
  createdAt   DateTime @default(now())
}

model DebateEdge {
  id        String         @id @default(cuid())
  sheetId   String
  sheet     DebateSheet    @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  fromId    String
  toId      String
  kind      DebateEdgeKind
  thread    String?
  ord       Int?
  rationale String?
  createdAt DateTime       @default(now())

  @@unique([sheetId, fromId, toId, kind, thread], name: "edge_idempotent")
  @@index([sheetId, fromId, toId, kind, thread])
}

model LocusStatus {
  id        String      @id @default(cuid())
  sheetId   String
  sheet     DebateSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  locusPath String
  open      Boolean     @default(true)
  closable  Boolean?
}

model SheetAcceptance {
  id        String      @id @default(cuid())
  sheetId   String      @unique
  sheet     DebateSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  semantics String // 'grounded' | 'preferred' | 'hybrid'
  labels    Json // { "nodeId": "skeptical-accepted" | "credulous-accepted" | "rejected" | "undecided" }
}

model UnresolvedCQ {
  id      String      @id @default(cuid())
  sheetId String
  sheet   DebateSheet @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  nodeId  String
  cqKey   String

  @@index([sheetId, nodeId, cqKey], name: "unresolved_cq_idx")
}

// ---------- Argument internals (two-level detail) ----------
model ArgumentDiagram {
  id         String         @id @default(cuid())
  title      String?
  statements Statement[]
  inferences Inference[]
  cqStatus   Json?
  evidence   EvidenceLink[]

  createdById String
  createdAt   DateTime    @default(now())
  DebateNode  DebateNode?
}

model Statement {
  id        String          @id @default(cuid())
  diagramId String
  diagram   ArgumentDiagram @relation(fields: [diagramId], references: [id], onDelete: Cascade)
  text      String
  role      StatementRole
  lang      String?
  tags      String[]

  // back-relation for named relation "InferenceConclusion"
  conclusionFor    Inference[]        @relation("InferenceConclusion")
  InferencePremise InferencePremise[]
}

model Inference {
  id        String          @id @default(cuid())
  diagramId String
  diagram   ArgumentDiagram @relation(fields: [diagramId], references: [id], onDelete: Cascade)

  kind InferenceKind

  conclusionId String
  conclusion   Statement @relation("InferenceConclusion", fields: [conclusionId], references: [id])

  schemeKey String?

  // Many premises via join model
  premises InferencePremise[]

  cqKeys String[] @default([])
}

model InferencePremise {
  inferenceId String
  statementId String

  inference Inference @relation(fields: [inferenceId], references: [id], onDelete: Cascade)
  statement Statement @relation(fields: [statementId], references: [id], onDelete: Cascade)

  @@id([inferenceId, statementId])
}

// ---------- Evidence as first-class ----------
model EvidenceNode {
  id          String   @id @default(cuid())
  url         String
  title       String?
  citation    String?
  kind        String?
  reliability Float?
  addedById   String
  addedAt     DateTime @default(now())

  links EvidenceLink[]
}

model EvidenceLink {
  id String @id @default(cuid())

  // DO NOT auto-generate FKs; they must point to real rows
  evidenceId String?
  evidence   EvidenceNode? @relation(fields: [evidenceId], references: [id], onDelete: SetNull)

  targetKind String  @default("argument") // e.g., "argument" | "claim" | "sheet"
  targetId   String? // FK-ish string; leave nullable

  selectors   Json? // annotation anchors
  note        String?
  uri         String // redundant safety (snapshot of source URL)
  snapshotKey String?

  // Optional link to an argument diagram (kept nullable; set-null on deletion)
  argumentDiagramId String?
  ArgumentDiagram   ArgumentDiagram? @relation(fields: [argumentDiagramId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([targetKind, targetId])
  @@index([argumentDiagramId])
  @@index([evidenceId])
}

/// Edges induced when a stack in room A references (is attached to, cites, embeds) room B.
/// We store both room ids for quick aggregation; optionally keep a stackId for provenance.
model StackReference {
  id                 String  @id @default(cuid())
  fromDeliberationId String
  toDeliberationId   String
  stackId            String?
  relation           String? // 'attached' | 'cites' | 'embeds' | ...

  createdAt DateTime @default(now())

  fromDeliberation Deliberation @relation("StackRefFrom", fields: [fromDeliberationId], references: [id], onDelete: Cascade)
  toDeliberation   Deliberation @relation("StackRefTo", fields: [toDeliberationId], references: [id], onDelete: Cascade)

  // Optional FK to your Stack model if present
  stack Stack? @relation(fields: [stackId], references: [id], onDelete: SetNull)

  @@unique([fromDeliberationId, toDeliberationId, stackId, relation])
  @@index([fromDeliberationId])
  @@index([toDeliberationId])
  @@index([stackId])
}

/// Edges when arguments/claims are imported or restated across rooms.
/// Keep both room ids; optionally track argument id mapping (from→to) and a kind.
model ArgumentImport {
  id                 String  @id @default(cuid())
  fromDeliberationId String
  toDeliberationId   String
  fromArgumentId     String?
  toArgumentId       String?
  kind               String? // 'import' | 'restatement' | 'quote' | ...

  fromClaimId  String? // snapshot at import time
  toClaimId    String? // snapshot at import time
  baseAtImport Float? // snapshot

  fingerprint String @unique // sha1(from|to|fromClaim|toClaim|fromArg)
  metaJson    Json?

  createdAt DateTime @default(now())

  fromDeliberation Deliberation @relation("ArgImpFrom", fields: [fromDeliberationId], references: [id], onDelete: Cascade)
  toDeliberation   Deliberation @relation("ArgImpTo", fields: [toDeliberationId], references: [id], onDelete: Cascade)
  fromArgument     Argument?    @relation("ArgImpFromArg", fields: [fromArgumentId], references: [id], onDelete: SetNull)
  toArgument       Argument?    @relation("ArgImpToArg", fields: [toArgumentId], references: [id], onDelete: SetNull)

  @@unique([fromArgumentId, toArgumentId, kind])
  @@index([fromDeliberationId])
  @@index([toDeliberationId])
  @@index([fromArgumentId])
  @@index([toArgumentId])
  @@index([fromDeliberationId, toDeliberationId])
  @@index([toDeliberationId, toClaimId])
  @@index([fromDeliberationId, fromClaimId])
}

/// Weak ties when the same author(s) produce work in both rooms.
/// Store only one directed record per unordered pair (canonicalize fromId < toId in app code).
model SharedAuthorRoomEdge {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  strength  Int? // e.g., count of shared authorships or a weighted score
  createdAt DateTime @default(now())

  from Deliberation @relation("SharedAuthorFrom", fields: [fromId], references: [id], onDelete: Cascade)
  to   Deliberation @relation("SharedAuthorTo", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
  @@index([fromId])
  @@index([toId])
}

/// ——— Evidence/strength over arguments that support a claim (hom(I, φ)) ———
model ArgumentSupport {
  id             String @id @default(cuid())
  deliberationId String
  claimId        String // supported φ
  argumentId     String // supporting argument a

  mode      String  @default("product") // scoring mode snapshot ("min"|"product"|custom)
  strength  Float   @default(0.6) // 0..1 scalar
  composed  Boolean @default(false) // true if computed via chaining (not atomic)
  rationale String? // why this number (optional)
  base      Float? // Confidence base value for argument support (added for backfill script)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NEW (lets us “include imported lines” only when asked)
  provenanceJson Json? // e.g., {kind:'import', fingerprint, fromDeliberationId, fromArgumentId}

  @@unique([claimId, argumentId, mode], name: "arg_support_unique")
  @@index([deliberationId, claimId])
  @@index([argumentId])
}

/// Tag a (possibly implicit) assumption that an argument a relies upon.
model AssumptionUse {
  id             String @id @default(cuid())
  deliberationId String
  argumentId     String

  // Either tie to an existing claim…
  assumptionClaimId String? // FK to Claim.id (nullable)
  // …or store freeform text for a local assumption (one of the two must be present)
  assumptionText    String?

  role       String @default("premise") // 'premise'|'warrant'|'value'|… (open set)
  weight     Float? // local weight 0..1 for this assumption (optional)
  confidence Float? // confidence provided by author/UI (optional)
  metaJson   Json?

  createdAt DateTime @default(now())

  @@index([argumentId])
  @@index([assumptionClaimId])
}

model AgoraRoom {
  id         String        @id @default(cuid())
  slug       String        @unique
  title      String
  summary    String?
  visibility String        @default("public") // or an enum if you prefer
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  sheets     DebateSheet[] @relation(name: "RoomSheets")

  deliberations Deliberation[]
}

model RoomFunctor {
  id           String   @id @default(cuid())
  fromRoomId   String // deliberationId
  toRoomId     String // deliberationId
  claimMapJson Json // { "<fromClaimId>": "<toClaimId>", ... }
  notes        String?
  createdById  String?
  createdAt    DateTime @default(now())

  @@unique([fromRoomId, toRoomId])
  @@index([fromRoomId, toRoomId])
}

// ---------- Knowledge Base (Phase A) ----------
enum KbVisibility {
  public
  org
  followers
  private
}

enum KbRole {
  owner
  editor
  commenter
  reader
}

enum KbSpaceKind {
  personal
  team
  org
  project
}

enum KbBlockType {
  text
  image
  link
  claim
  claim_set
  argument
  sheet
  room_summary
  transport
  evidence_list
  cq_tracker
  plexus_tile
  theory_work // NEW
  theory_section // (optional) inline a single section from a work
}

model KbSpace {
  id         String       @id @default(cuid())
  slug       String       @unique
  title      String
  summary    String?
  visibility KbVisibility @default(public)

  kind        KbSpaceKind @default(personal) // <— added; used by create route
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  pages   KbPage[]
  members KbSpaceMember[]
}

model KbSpaceMember {
  id        String   @id @default(cuid())
  spaceId   String
  userId    String
  role      KbRole   @default(reader)
  createdAt DateTime @default(now())

  space KbSpace @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId])
  @@index([userId])
}

model KbPage {
  id          String       @id @default(cuid())
  spaceId     String
  slug        String
  title       String
  summary     String?
  visibility  KbVisibility @default(public)
  tags        String[] // small, flexible
  frontmatter Json? // { defaultLens, eval: { mode, tau }, ... }

  createdById String
  updatedById String? // <— added; used by PATCH
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  space     KbSpace      @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  blocks    KbBlock[]
  snapshots KbSnapshot[]

  theoryWorks        TheoryWork[] // For TheoryWork.kbPage
  TheoryWorkCitation TheoryWorkCitation[]

  @@unique([spaceId, slug])
  @@index([spaceId, updatedAt])
  @@index([createdById, updatedAt])
}

model KbBlock {
  id          String      @id @default(cuid())
  pageId      String
  ord         Int
  type        KbBlockType
  live        Boolean     @default(true) // live vs pinned
  dataJson    Json // discriminated payload by `type`
  pinnedJson  Json? // when !live, frozen data
  citations   Json? // [{ kind, id, uri, note }]
  createdById String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  page KbPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId, ord])
}

model KbSnapshot {
  id          String   @id @default(cuid())
  pageId      String
  label       String?
  atTime      DateTime @default(now())
  createdById String
  manifest    Json // { page, blocks: [{id, live, pinnedJson?, liveHash?}] }

  page KbPage @relation(fields: [pageId], references: [id], onDelete: Cascade)

  @@index([pageId, atTime])
}
